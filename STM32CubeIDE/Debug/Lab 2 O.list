
Lab 2 O.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a4c  08003a4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a4c  08003a4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003a60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003a60  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a61  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a1  00000000  00000000  00028a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016545  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a003  00000000  00000000  00041a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ab  00000000  00000000  0004ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cde03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000cde58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a10 	.word	0x08003a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a10 	.word	0x08003a10

0800014c <updateLEDMatrix0>:
//int index_led=0;
const int MAX_LED_MATRIX=9;
int index_led_matrix=0;
uint8_t matrix_buffer[8];
int led_buffer[4]={1,5,0,8};
void updateLEDMatrix0(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800015a:	48c7      	ldr	r0, [pc, #796]	; (8000478 <updateLEDMatrix0+0x32c>)
 800015c:	f002 fc42 	bl	80029e4 <HAL_GPIO_WritePin>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b07      	cmp	r3, #7
 8000164:	f200 81c1 	bhi.w	80004ea <updateLEDMatrix0+0x39e>
 8000168:	a201      	add	r2, pc, #4	; (adr r2, 8000170 <updateLEDMatrix0+0x24>)
 800016a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016e:	bf00      	nop
 8000170:	08000191 	.word	0x08000191
 8000174:	080001fb 	.word	0x080001fb
 8000178:	08000265 	.word	0x08000265
 800017c:	080002cf 	.word	0x080002cf
 8000180:	08000339 	.word	0x08000339
 8000184:	080003a3 	.word	0x080003a3
 8000188:	0800040d 	.word	0x0800040d
 800018c:	08000481 	.word	0x08000481
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	48b9      	ldr	r0, [pc, #740]	; (800047c <updateLEDMatrix0+0x330>)
 8000196:	f002 fc25 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2108      	movs	r1, #8
 800019e:	48b7      	ldr	r0, [pc, #732]	; (800047c <updateLEDMatrix0+0x330>)
 80001a0:	f002 fc20 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001aa:	48b4      	ldr	r0, [pc, #720]	; (800047c <updateLEDMatrix0+0x330>)
 80001ac:	f002 fc1a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b6:	48b1      	ldr	r0, [pc, #708]	; (800047c <updateLEDMatrix0+0x330>)
 80001b8:	f002 fc14 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	48ae      	ldr	r0, [pc, #696]	; (800047c <updateLEDMatrix0+0x330>)
 80001c4:	f002 fc0e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48ab      	ldr	r0, [pc, #684]	; (800047c <updateLEDMatrix0+0x330>)
 80001d0:	f002 fc08 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	48a8      	ldr	r0, [pc, #672]	; (800047c <updateLEDMatrix0+0x330>)
 80001dc:	f002 fc02 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e6:	48a5      	ldr	r0, [pc, #660]	; (800047c <updateLEDMatrix0+0x330>)
 80001e8:	f002 fbfc 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	48a1      	ldr	r0, [pc, #644]	; (8000478 <updateLEDMatrix0+0x32c>)
 80001f4:	f002 fbf6 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80001f8:	e178      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2104      	movs	r1, #4
 80001fe:	489f      	ldr	r0, [pc, #636]	; (800047c <updateLEDMatrix0+0x330>)
 8000200:	f002 fbf0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2108      	movs	r1, #8
 8000208:	489c      	ldr	r0, [pc, #624]	; (800047c <updateLEDMatrix0+0x330>)
 800020a:	f002 fbeb 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000214:	4899      	ldr	r0, [pc, #612]	; (800047c <updateLEDMatrix0+0x330>)
 8000216:	f002 fbe5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000220:	4896      	ldr	r0, [pc, #600]	; (800047c <updateLEDMatrix0+0x330>)
 8000222:	f002 fbdf 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4893      	ldr	r0, [pc, #588]	; (800047c <updateLEDMatrix0+0x330>)
 800022e:	f002 fbd9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	4890      	ldr	r0, [pc, #576]	; (800047c <updateLEDMatrix0+0x330>)
 800023a:	f002 fbd3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000244:	488d      	ldr	r0, [pc, #564]	; (800047c <updateLEDMatrix0+0x330>)
 8000246:	f002 fbcd 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000250:	488a      	ldr	r0, [pc, #552]	; (800047c <updateLEDMatrix0+0x330>)
 8000252:	f002 fbc7 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025c:	4886      	ldr	r0, [pc, #536]	; (8000478 <updateLEDMatrix0+0x32c>)
 800025e:	f002 fbc1 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000262:	e143      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	4884      	ldr	r0, [pc, #528]	; (800047c <updateLEDMatrix0+0x330>)
 800026a:	f002 fbbb 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2108      	movs	r1, #8
 8000272:	4882      	ldr	r0, [pc, #520]	; (800047c <updateLEDMatrix0+0x330>)
 8000274:	f002 fbb6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	487f      	ldr	r0, [pc, #508]	; (800047c <updateLEDMatrix0+0x330>)
 8000280:	f002 fbb0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800028a:	487c      	ldr	r0, [pc, #496]	; (800047c <updateLEDMatrix0+0x330>)
 800028c:	f002 fbaa 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000296:	4879      	ldr	r0, [pc, #484]	; (800047c <updateLEDMatrix0+0x330>)
 8000298:	f002 fba4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	4876      	ldr	r0, [pc, #472]	; (800047c <updateLEDMatrix0+0x330>)
 80002a4:	f002 fb9e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	4873      	ldr	r0, [pc, #460]	; (800047c <updateLEDMatrix0+0x330>)
 80002b0:	f002 fb98 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ba:	4870      	ldr	r0, [pc, #448]	; (800047c <updateLEDMatrix0+0x330>)
 80002bc:	f002 fb92 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c6:	486c      	ldr	r0, [pc, #432]	; (8000478 <updateLEDMatrix0+0x32c>)
 80002c8:	f002 fb8c 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80002cc:	e10e      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2104      	movs	r1, #4
 80002d2:	486a      	ldr	r0, [pc, #424]	; (800047c <updateLEDMatrix0+0x330>)
 80002d4:	f002 fb86 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2108      	movs	r1, #8
 80002dc:	4867      	ldr	r0, [pc, #412]	; (800047c <updateLEDMatrix0+0x330>)
 80002de:	f002 fb81 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e8:	4864      	ldr	r0, [pc, #400]	; (800047c <updateLEDMatrix0+0x330>)
 80002ea:	f002 fb7b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f4:	4861      	ldr	r0, [pc, #388]	; (800047c <updateLEDMatrix0+0x330>)
 80002f6:	f002 fb75 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000300:	485e      	ldr	r0, [pc, #376]	; (800047c <updateLEDMatrix0+0x330>)
 8000302:	f002 fb6f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030c:	485b      	ldr	r0, [pc, #364]	; (800047c <updateLEDMatrix0+0x330>)
 800030e:	f002 fb69 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000318:	4858      	ldr	r0, [pc, #352]	; (800047c <updateLEDMatrix0+0x330>)
 800031a:	f002 fb63 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	4855      	ldr	r0, [pc, #340]	; (800047c <updateLEDMatrix0+0x330>)
 8000326:	f002 fb5d 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000330:	4851      	ldr	r0, [pc, #324]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000332:	f002 fb57 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000336:	e0d9      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2104      	movs	r1, #4
 800033c:	484f      	ldr	r0, [pc, #316]	; (800047c <updateLEDMatrix0+0x330>)
 800033e:	f002 fb51 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2108      	movs	r1, #8
 8000346:	484d      	ldr	r0, [pc, #308]	; (800047c <updateLEDMatrix0+0x330>)
 8000348:	f002 fb4c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	484a      	ldr	r0, [pc, #296]	; (800047c <updateLEDMatrix0+0x330>)
 8000354:	f002 fb46 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035e:	4847      	ldr	r0, [pc, #284]	; (800047c <updateLEDMatrix0+0x330>)
 8000360:	f002 fb40 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <updateLEDMatrix0+0x330>)
 800036c:	f002 fb3a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4841      	ldr	r0, [pc, #260]	; (800047c <updateLEDMatrix0+0x330>)
 8000378:	f002 fb34 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000382:	483e      	ldr	r0, [pc, #248]	; (800047c <updateLEDMatrix0+0x330>)
 8000384:	f002 fb2e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800038e:	483b      	ldr	r0, [pc, #236]	; (800047c <updateLEDMatrix0+0x330>)
 8000390:	f002 fb28 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039a:	4837      	ldr	r0, [pc, #220]	; (8000478 <updateLEDMatrix0+0x32c>)
 800039c:	f002 fb22 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80003a0:	e0a4      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2104      	movs	r1, #4
 80003a6:	4835      	ldr	r0, [pc, #212]	; (800047c <updateLEDMatrix0+0x330>)
 80003a8:	f002 fb1c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2108      	movs	r1, #8
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <updateLEDMatrix0+0x330>)
 80003b2:	f002 fb17 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	482f      	ldr	r0, [pc, #188]	; (800047c <updateLEDMatrix0+0x330>)
 80003be:	f002 fb11 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	482c      	ldr	r0, [pc, #176]	; (800047c <updateLEDMatrix0+0x330>)
 80003ca:	f002 fb0b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d4:	4829      	ldr	r0, [pc, #164]	; (800047c <updateLEDMatrix0+0x330>)
 80003d6:	f002 fb05 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <updateLEDMatrix0+0x330>)
 80003e2:	f002 faff 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <updateLEDMatrix0+0x330>)
 80003ee:	f002 faf9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f8:	4820      	ldr	r0, [pc, #128]	; (800047c <updateLEDMatrix0+0x330>)
 80003fa:	f002 faf3 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000404:	481c      	ldr	r0, [pc, #112]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000406:	f002 faed 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800040a:	e06f      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2104      	movs	r1, #4
 8000410:	481a      	ldr	r0, [pc, #104]	; (800047c <updateLEDMatrix0+0x330>)
 8000412:	f002 fae7 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	4818      	ldr	r0, [pc, #96]	; (800047c <updateLEDMatrix0+0x330>)
 800041c:	f002 fae2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000426:	4815      	ldr	r0, [pc, #84]	; (800047c <updateLEDMatrix0+0x330>)
 8000428:	f002 fadc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <updateLEDMatrix0+0x330>)
 8000434:	f002 fad6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <updateLEDMatrix0+0x330>)
 8000440:	f002 fad0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <updateLEDMatrix0+0x330>)
 800044c:	f002 faca 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <updateLEDMatrix0+0x330>)
 8000458:	f002 fac4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <updateLEDMatrix0+0x330>)
 8000464:	f002 fabe 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000470:	f002 fab8 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000474:	e03a      	b.n	80004ec <updateLEDMatrix0+0x3a0>
 8000476:	bf00      	nop
 8000478:	40010c00 	.word	0x40010c00
 800047c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2104      	movs	r1, #4
 8000484:	481b      	ldr	r0, [pc, #108]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 8000486:	f002 faad 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2108      	movs	r1, #8
 800048e:	4819      	ldr	r0, [pc, #100]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 8000490:	f002 faa8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	4816      	ldr	r0, [pc, #88]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 800049c:	f002 faa2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a6:	4813      	ldr	r0, [pc, #76]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004a8:	f002 fa9c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	4810      	ldr	r0, [pc, #64]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004b4:	f002 fa96 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004c0:	f002 fa90 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004cc:	f002 fa8a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004d8:	f002 fa84 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <updateLEDMatrix0+0x3ac>)
 80004e4:	f002 fa7e 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 80004e8:	e000      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	default:
		break;
 80004ea:	bf00      	nop
	}
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010800 	.word	0x40010800
 80004f8:	40010c00 	.word	0x40010c00

080004fc <updateLEDMatrix1>:

void updateLEDMatrix1(int index){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800050a:	48c7      	ldr	r0, [pc, #796]	; (8000828 <updateLEDMatrix1+0x32c>)
 800050c:	f002 fa6a 	bl	80029e4 <HAL_GPIO_WritePin>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b07      	cmp	r3, #7
 8000514:	f200 81c1 	bhi.w	800089a <updateLEDMatrix1+0x39e>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <updateLEDMatrix1+0x24>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000541 	.word	0x08000541
 8000524:	080005ab 	.word	0x080005ab
 8000528:	08000615 	.word	0x08000615
 800052c:	0800067f 	.word	0x0800067f
 8000530:	080006e9 	.word	0x080006e9
 8000534:	08000753 	.word	0x08000753
 8000538:	080007bd 	.word	0x080007bd
 800053c:	08000831 	.word	0x08000831
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2104      	movs	r1, #4
 8000544:	48b9      	ldr	r0, [pc, #740]	; (800082c <updateLEDMatrix1+0x330>)
 8000546:	f002 fa4d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	48b7      	ldr	r0, [pc, #732]	; (800082c <updateLEDMatrix1+0x330>)
 8000550:	f002 fa48 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	48b4      	ldr	r0, [pc, #720]	; (800082c <updateLEDMatrix1+0x330>)
 800055c:	f002 fa42 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000566:	48b1      	ldr	r0, [pc, #708]	; (800082c <updateLEDMatrix1+0x330>)
 8000568:	f002 fa3c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	48ae      	ldr	r0, [pc, #696]	; (800082c <updateLEDMatrix1+0x330>)
 8000574:	f002 fa36 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	48ab      	ldr	r0, [pc, #684]	; (800082c <updateLEDMatrix1+0x330>)
 8000580:	f002 fa30 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058a:	48a8      	ldr	r0, [pc, #672]	; (800082c <updateLEDMatrix1+0x330>)
 800058c:	f002 fa2a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000596:	48a5      	ldr	r0, [pc, #660]	; (800082c <updateLEDMatrix1+0x330>)
 8000598:	f002 fa24 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	48a1      	ldr	r0, [pc, #644]	; (8000828 <updateLEDMatrix1+0x32c>)
 80005a4:	f002 fa1e 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80005a8:	e178      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	489f      	ldr	r0, [pc, #636]	; (800082c <updateLEDMatrix1+0x330>)
 80005b0:	f002 fa18 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	489c      	ldr	r0, [pc, #624]	; (800082c <updateLEDMatrix1+0x330>)
 80005ba:	f002 fa13 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	4899      	ldr	r0, [pc, #612]	; (800082c <updateLEDMatrix1+0x330>)
 80005c6:	f002 fa0d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d0:	4896      	ldr	r0, [pc, #600]	; (800082c <updateLEDMatrix1+0x330>)
 80005d2:	f002 fa07 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005dc:	4893      	ldr	r0, [pc, #588]	; (800082c <updateLEDMatrix1+0x330>)
 80005de:	f002 fa01 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4890      	ldr	r0, [pc, #576]	; (800082c <updateLEDMatrix1+0x330>)
 80005ea:	f002 f9fb 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	488d      	ldr	r0, [pc, #564]	; (800082c <updateLEDMatrix1+0x330>)
 80005f6:	f002 f9f5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	488a      	ldr	r0, [pc, #552]	; (800082c <updateLEDMatrix1+0x330>)
 8000602:	f002 f9ef 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4886      	ldr	r0, [pc, #536]	; (8000828 <updateLEDMatrix1+0x32c>)
 800060e:	f002 f9e9 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000612:	e143      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4884      	ldr	r0, [pc, #528]	; (800082c <updateLEDMatrix1+0x330>)
 800061a:	f002 f9e3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4882      	ldr	r0, [pc, #520]	; (800082c <updateLEDMatrix1+0x330>)
 8000624:	f002 f9de 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	487f      	ldr	r0, [pc, #508]	; (800082c <updateLEDMatrix1+0x330>)
 8000630:	f002 f9d8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	487c      	ldr	r0, [pc, #496]	; (800082c <updateLEDMatrix1+0x330>)
 800063c:	f002 f9d2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	4879      	ldr	r0, [pc, #484]	; (800082c <updateLEDMatrix1+0x330>)
 8000648:	f002 f9cc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4876      	ldr	r0, [pc, #472]	; (800082c <updateLEDMatrix1+0x330>)
 8000654:	f002 f9c6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4873      	ldr	r0, [pc, #460]	; (800082c <updateLEDMatrix1+0x330>)
 8000660:	f002 f9c0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	4870      	ldr	r0, [pc, #448]	; (800082c <updateLEDMatrix1+0x330>)
 800066c:	f002 f9ba 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000676:	486c      	ldr	r0, [pc, #432]	; (8000828 <updateLEDMatrix1+0x32c>)
 8000678:	f002 f9b4 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800067c:	e10e      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2104      	movs	r1, #4
 8000682:	486a      	ldr	r0, [pc, #424]	; (800082c <updateLEDMatrix1+0x330>)
 8000684:	f002 f9ae 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	4867      	ldr	r0, [pc, #412]	; (800082c <updateLEDMatrix1+0x330>)
 800068e:	f002 f9a9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4864      	ldr	r0, [pc, #400]	; (800082c <updateLEDMatrix1+0x330>)
 800069a:	f002 f9a3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4861      	ldr	r0, [pc, #388]	; (800082c <updateLEDMatrix1+0x330>)
 80006a6:	f002 f99d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b0:	485e      	ldr	r0, [pc, #376]	; (800082c <updateLEDMatrix1+0x330>)
 80006b2:	f002 f997 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	485b      	ldr	r0, [pc, #364]	; (800082c <updateLEDMatrix1+0x330>)
 80006be:	f002 f991 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c8:	4858      	ldr	r0, [pc, #352]	; (800082c <updateLEDMatrix1+0x330>)
 80006ca:	f002 f98b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d4:	4855      	ldr	r0, [pc, #340]	; (800082c <updateLEDMatrix1+0x330>)
 80006d6:	f002 f985 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4851      	ldr	r0, [pc, #324]	; (8000828 <updateLEDMatrix1+0x32c>)
 80006e2:	f002 f97f 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80006e6:	e0d9      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2104      	movs	r1, #4
 80006ec:	484f      	ldr	r0, [pc, #316]	; (800082c <updateLEDMatrix1+0x330>)
 80006ee:	f002 f979 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <updateLEDMatrix1+0x330>)
 80006f8:	f002 f974 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	484a      	ldr	r0, [pc, #296]	; (800082c <updateLEDMatrix1+0x330>)
 8000704:	f002 f96e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	4847      	ldr	r0, [pc, #284]	; (800082c <updateLEDMatrix1+0x330>)
 8000710:	f002 f968 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4844      	ldr	r0, [pc, #272]	; (800082c <updateLEDMatrix1+0x330>)
 800071c:	f002 f962 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	4841      	ldr	r0, [pc, #260]	; (800082c <updateLEDMatrix1+0x330>)
 8000728:	f002 f95c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <updateLEDMatrix1+0x330>)
 8000734:	f002 f956 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073e:	483b      	ldr	r0, [pc, #236]	; (800082c <updateLEDMatrix1+0x330>)
 8000740:	f002 f950 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4837      	ldr	r0, [pc, #220]	; (8000828 <updateLEDMatrix1+0x32c>)
 800074c:	f002 f94a 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000750:	e0a4      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2104      	movs	r1, #4
 8000756:	4835      	ldr	r0, [pc, #212]	; (800082c <updateLEDMatrix1+0x330>)
 8000758:	f002 f944 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2108      	movs	r1, #8
 8000760:	4832      	ldr	r0, [pc, #200]	; (800082c <updateLEDMatrix1+0x330>)
 8000762:	f002 f93f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	482f      	ldr	r0, [pc, #188]	; (800082c <updateLEDMatrix1+0x330>)
 800076e:	f002 f939 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	482c      	ldr	r0, [pc, #176]	; (800082c <updateLEDMatrix1+0x330>)
 800077a:	f002 f933 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4829      	ldr	r0, [pc, #164]	; (800082c <updateLEDMatrix1+0x330>)
 8000786:	f002 f92d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4826      	ldr	r0, [pc, #152]	; (800082c <updateLEDMatrix1+0x330>)
 8000792:	f002 f927 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <updateLEDMatrix1+0x330>)
 800079e:	f002 f921 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <updateLEDMatrix1+0x330>)
 80007aa:	f002 f91b 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	481c      	ldr	r0, [pc, #112]	; (8000828 <updateLEDMatrix1+0x32c>)
 80007b6:	f002 f915 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80007ba:	e06f      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <updateLEDMatrix1+0x330>)
 80007c2:	f002 f90f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <updateLEDMatrix1+0x330>)
 80007cc:	f002 f90a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <updateLEDMatrix1+0x330>)
 80007d8:	f002 f904 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <updateLEDMatrix1+0x330>)
 80007e4:	f002 f8fe 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <updateLEDMatrix1+0x330>)
 80007f0:	f002 f8f8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <updateLEDMatrix1+0x330>)
 80007fc:	f002 f8f2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <updateLEDMatrix1+0x330>)
 8000808:	f002 f8ec 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <updateLEDMatrix1+0x330>)
 8000814:	f002 f8e6 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081e:	4802      	ldr	r0, [pc, #8]	; (8000828 <updateLEDMatrix1+0x32c>)
 8000820:	f002 f8e0 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000824:	e03a      	b.n	800089c <updateLEDMatrix1+0x3a0>
 8000826:	bf00      	nop
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	481b      	ldr	r0, [pc, #108]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000836:	f002 f8d5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2108      	movs	r1, #8
 800083e:	4819      	ldr	r0, [pc, #100]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000840:	f002 f8d0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 800084c:	f002 f8ca 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000858:	f002 f8c4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000864:	f002 f8be 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000870:	f002 f8b8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 800087c:	f002 f8b2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000888:	f002 f8ac 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <updateLEDMatrix1+0x3ac>)
 8000894:	f002 f8a6 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8000898:	e000      	b.n	800089c <updateLEDMatrix1+0x3a0>
	default:
		break;
 800089a:	bf00      	nop
	}
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40010c00 	.word	0x40010c00

080008ac <updateLEDMatrix2>:
void updateLEDMatrix2(int index){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ba:	48c7      	ldr	r0, [pc, #796]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 80008bc:	f002 f892 	bl	80029e4 <HAL_GPIO_WritePin>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	f200 81c1 	bhi.w	8000c4a <updateLEDMatrix2+0x39e>
 80008c8:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <updateLEDMatrix2+0x24>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	080008f1 	.word	0x080008f1
 80008d4:	0800095b 	.word	0x0800095b
 80008d8:	080009c5 	.word	0x080009c5
 80008dc:	08000a2f 	.word	0x08000a2f
 80008e0:	08000a99 	.word	0x08000a99
 80008e4:	08000b03 	.word	0x08000b03
 80008e8:	08000b6d 	.word	0x08000b6d
 80008ec:	08000be1 	.word	0x08000be1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2104      	movs	r1, #4
 80008f4:	48b9      	ldr	r0, [pc, #740]	; (8000bdc <updateLEDMatrix2+0x330>)
 80008f6:	f002 f875 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	48b7      	ldr	r0, [pc, #732]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000900:	f002 f870 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090a:	48b4      	ldr	r0, [pc, #720]	; (8000bdc <updateLEDMatrix2+0x330>)
 800090c:	f002 f86a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000916:	48b1      	ldr	r0, [pc, #708]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000918:	f002 f864 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	48ae      	ldr	r0, [pc, #696]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000924:	f002 f85e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	48ab      	ldr	r0, [pc, #684]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000930:	f002 f858 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	48a8      	ldr	r0, [pc, #672]	; (8000bdc <updateLEDMatrix2+0x330>)
 800093c:	f002 f852 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000946:	48a5      	ldr	r0, [pc, #660]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000948:	f002 f84c 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	48a1      	ldr	r0, [pc, #644]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000954:	f002 f846 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000958:	e178      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	489f      	ldr	r0, [pc, #636]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000960:	f002 f840 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	489c      	ldr	r0, [pc, #624]	; (8000bdc <updateLEDMatrix2+0x330>)
 800096a:	f002 f83b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	4899      	ldr	r0, [pc, #612]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000976:	f002 f835 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	4896      	ldr	r0, [pc, #600]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000982:	f002 f82f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	4893      	ldr	r0, [pc, #588]	; (8000bdc <updateLEDMatrix2+0x330>)
 800098e:	f002 f829 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4890      	ldr	r0, [pc, #576]	; (8000bdc <updateLEDMatrix2+0x330>)
 800099a:	f002 f823 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	488d      	ldr	r0, [pc, #564]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009a6:	f002 f81d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	488a      	ldr	r0, [pc, #552]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009b2:	f002 f817 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4886      	ldr	r0, [pc, #536]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 80009be:	f002 f811 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80009c2:	e143      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4884      	ldr	r0, [pc, #528]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009ca:	f002 f80b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	4882      	ldr	r0, [pc, #520]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009d4:	f002 f806 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	487f      	ldr	r0, [pc, #508]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009e0:	f002 f800 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ea:	487c      	ldr	r0, [pc, #496]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009ec:	f001 fffa 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f6:	4879      	ldr	r0, [pc, #484]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009f8:	f001 fff4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4876      	ldr	r0, [pc, #472]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a04:	f001 ffee 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4873      	ldr	r0, [pc, #460]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a10:	f001 ffe8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4870      	ldr	r0, [pc, #448]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a1c:	f001 ffe2 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a26:	486c      	ldr	r0, [pc, #432]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000a28:	f001 ffdc 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000a2c:	e10e      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	486a      	ldr	r0, [pc, #424]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a34:	f001 ffd6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4867      	ldr	r0, [pc, #412]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a3e:	f001 ffd1 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4864      	ldr	r0, [pc, #400]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a4a:	f001 ffcb 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4861      	ldr	r0, [pc, #388]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a56:	f001 ffc5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	485e      	ldr	r0, [pc, #376]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a62:	f001 ffbf 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	485b      	ldr	r0, [pc, #364]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a6e:	f001 ffb9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4858      	ldr	r0, [pc, #352]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a7a:	f001 ffb3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a84:	4855      	ldr	r0, [pc, #340]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a86:	f001 ffad 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	4851      	ldr	r0, [pc, #324]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000a92:	f001 ffa7 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000a96:	e0d9      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	484f      	ldr	r0, [pc, #316]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a9e:	f001 ffa1 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	484d      	ldr	r0, [pc, #308]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000aa8:	f001 ff9c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	484a      	ldr	r0, [pc, #296]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ab4:	f001 ff96 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4847      	ldr	r0, [pc, #284]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ac0:	f001 ff90 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4844      	ldr	r0, [pc, #272]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000acc:	f001 ff8a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	4841      	ldr	r0, [pc, #260]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ad8:	f001 ff84 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	483e      	ldr	r0, [pc, #248]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ae4:	f001 ff7e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aee:	483b      	ldr	r0, [pc, #236]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000af0:	f001 ff78 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000afc:	f001 ff72 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000b00:	e0a4      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2104      	movs	r1, #4
 8000b06:	4835      	ldr	r0, [pc, #212]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b08:	f001 ff6c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4832      	ldr	r0, [pc, #200]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b12:	f001 ff67 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	482f      	ldr	r0, [pc, #188]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b1e:	f001 ff61 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b28:	482c      	ldr	r0, [pc, #176]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b2a:	f001 ff5b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4829      	ldr	r0, [pc, #164]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b36:	f001 ff55 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b42:	f001 ff4f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b4e:	f001 ff49 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b5a:	f001 ff43 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000b66:	f001 ff3d 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000b6a:	e06f      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2104      	movs	r1, #4
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b72:	f001 ff37 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b7c:	f001 ff32 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b88:	f001 ff2c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b94:	f001 ff26 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ba0:	f001 ff20 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bac:	f001 ff1a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bb8:	f001 ff14 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bc4:	f001 ff0e 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000bd0:	f001 ff08 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000bd4:	e03a      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
 8000bd6:	bf00      	nop
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2104      	movs	r1, #4
 8000be4:	481b      	ldr	r0, [pc, #108]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000be6:	f001 fefd 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2108      	movs	r1, #8
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000bf0:	f001 fef8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000bfc:	f001 fef2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c08:	f001 feec 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c14:	f001 fee6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c20:	f001 fee0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c2c:	f001 feda 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c38:	f001 fed4 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <updateLEDMatrix2+0x3ac>)
 8000c44:	f001 fece 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8000c48:	e000      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	default:
		break;
 8000c4a:	bf00      	nop
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <updateLEDMatrix3>:
void updateLEDMatrix3(int index){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c6a:	48c7      	ldr	r0, [pc, #796]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000c6c:	f001 feba 	bl	80029e4 <HAL_GPIO_WritePin>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	f200 81c1 	bhi.w	8000ffa <updateLEDMatrix3+0x39e>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <updateLEDMatrix3+0x24>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000d0b 	.word	0x08000d0b
 8000c88:	08000d75 	.word	0x08000d75
 8000c8c:	08000ddf 	.word	0x08000ddf
 8000c90:	08000e49 	.word	0x08000e49
 8000c94:	08000eb3 	.word	0x08000eb3
 8000c98:	08000f1d 	.word	0x08000f1d
 8000c9c:	08000f91 	.word	0x08000f91
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	48b9      	ldr	r0, [pc, #740]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ca6:	f001 fe9d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	48b7      	ldr	r0, [pc, #732]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cb0:	f001 fe98 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	48b4      	ldr	r0, [pc, #720]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cbc:	f001 fe92 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc6:	48b1      	ldr	r0, [pc, #708]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cc8:	f001 fe8c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	48ae      	ldr	r0, [pc, #696]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cd4:	f001 fe86 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	48ab      	ldr	r0, [pc, #684]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ce0:	f001 fe80 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cea:	48a8      	ldr	r0, [pc, #672]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cec:	f001 fe7a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf6:	48a5      	ldr	r0, [pc, #660]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cf8:	f001 fe74 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	48a1      	ldr	r0, [pc, #644]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000d04:	f001 fe6e 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000d08:	e178      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	489f      	ldr	r0, [pc, #636]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d10:	f001 fe68 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2108      	movs	r1, #8
 8000d18:	489c      	ldr	r0, [pc, #624]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d1a:	f001 fe63 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d24:	4899      	ldr	r0, [pc, #612]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d26:	f001 fe5d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d30:	4896      	ldr	r0, [pc, #600]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d32:	f001 fe57 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	4893      	ldr	r0, [pc, #588]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d3e:	f001 fe51 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4890      	ldr	r0, [pc, #576]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d4a:	f001 fe4b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d54:	488d      	ldr	r0, [pc, #564]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d56:	f001 fe45 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	488a      	ldr	r0, [pc, #552]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d62:	f001 fe3f 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	4886      	ldr	r0, [pc, #536]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000d6e:	f001 fe39 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000d72:	e143      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	4884      	ldr	r0, [pc, #528]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d7a:	f001 fe33 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	4882      	ldr	r0, [pc, #520]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d84:	f001 fe2e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8e:	487f      	ldr	r0, [pc, #508]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d90:	f001 fe28 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9a:	487c      	ldr	r0, [pc, #496]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d9c:	f001 fe22 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da6:	4879      	ldr	r0, [pc, #484]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000da8:	f001 fe1c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000db4:	f001 fe16 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	4873      	ldr	r0, [pc, #460]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dc0:	f001 fe10 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	4870      	ldr	r0, [pc, #448]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dcc:	f001 fe0a 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	486c      	ldr	r0, [pc, #432]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000dd8:	f001 fe04 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000ddc:	e10e      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2104      	movs	r1, #4
 8000de2:	486a      	ldr	r0, [pc, #424]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000de4:	f001 fdfe 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2108      	movs	r1, #8
 8000dec:	4867      	ldr	r0, [pc, #412]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dee:	f001 fdf9 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df8:	4864      	ldr	r0, [pc, #400]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dfa:	f001 fdf3 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	4861      	ldr	r0, [pc, #388]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e06:	f001 fded 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e10:	485e      	ldr	r0, [pc, #376]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e12:	f001 fde7 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1c:	485b      	ldr	r0, [pc, #364]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e1e:	f001 fde1 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e28:	4858      	ldr	r0, [pc, #352]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e2a:	f001 fddb 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e34:	4855      	ldr	r0, [pc, #340]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e36:	f001 fdd5 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e40:	4851      	ldr	r0, [pc, #324]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000e42:	f001 fdcf 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000e46:	e0d9      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	484f      	ldr	r0, [pc, #316]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e4e:	f001 fdc9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2108      	movs	r1, #8
 8000e56:	484d      	ldr	r0, [pc, #308]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e58:	f001 fdc4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	484a      	ldr	r0, [pc, #296]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e64:	f001 fdbe 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6e:	4847      	ldr	r0, [pc, #284]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e70:	f001 fdb8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7a:	4844      	ldr	r0, [pc, #272]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e7c:	f001 fdb2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	4841      	ldr	r0, [pc, #260]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e88:	f001 fdac 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	483e      	ldr	r0, [pc, #248]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e94:	f001 fda6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	483b      	ldr	r0, [pc, #236]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ea0:	f001 fda0 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eaa:	4837      	ldr	r0, [pc, #220]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000eac:	f001 fd9a 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000eb0:	e0a4      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000eb8:	f001 fd94 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4832      	ldr	r0, [pc, #200]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ec2:	f001 fd8f 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	482f      	ldr	r0, [pc, #188]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ece:	f001 fd89 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	482c      	ldr	r0, [pc, #176]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000eda:	f001 fd83 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ee6:	f001 fd7d 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	4826      	ldr	r0, [pc, #152]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ef2:	f001 fd77 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000efe:	f001 fd71 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	4820      	ldr	r0, [pc, #128]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f0a:	f001 fd6b 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000f16:	f001 fd65 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000f1a:	e06f      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2104      	movs	r1, #4
 8000f20:	481a      	ldr	r0, [pc, #104]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f22:	f001 fd5f 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f2c:	f001 fd5a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f38:	f001 fd54 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f44:	f001 fd4e 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f50:	f001 fd48 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f5c:	f001 fd42 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f68:	f001 fd3c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f74:	f001 fd36 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000f80:	f001 fd30 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000f84:	e03a      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
 8000f86:	bf00      	nop
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000f96:	f001 fd25 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fa0:	f001 fd20 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fac:	f001 fd1a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fb8:	f001 fd14 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fc4:	f001 fd0e 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fd0:	f001 fd08 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fdc:	f001 fd02 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fe8:	f001 fcfc 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <updateLEDMatrix3+0x3ac>)
 8000ff4:	f001 fcf6 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8000ff8:	e000      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	default:
		break;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <updateLEDMatrix4>:
void updateLEDMatrix4(int index){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800101a:	48c7      	ldr	r0, [pc, #796]	; (8001338 <updateLEDMatrix4+0x32c>)
 800101c:	f001 fce2 	bl	80029e4 <HAL_GPIO_WritePin>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b07      	cmp	r3, #7
 8001024:	f200 81c1 	bhi.w	80013aa <updateLEDMatrix4+0x39e>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <updateLEDMatrix4+0x24>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001051 	.word	0x08001051
 8001034:	080010bb 	.word	0x080010bb
 8001038:	08001125 	.word	0x08001125
 800103c:	0800118f 	.word	0x0800118f
 8001040:	080011f9 	.word	0x080011f9
 8001044:	08001263 	.word	0x08001263
 8001048:	080012cd 	.word	0x080012cd
 800104c:	08001341 	.word	0x08001341
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2104      	movs	r1, #4
 8001054:	48b9      	ldr	r0, [pc, #740]	; (800133c <updateLEDMatrix4+0x330>)
 8001056:	f001 fcc5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	48b7      	ldr	r0, [pc, #732]	; (800133c <updateLEDMatrix4+0x330>)
 8001060:	f001 fcc0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	48b4      	ldr	r0, [pc, #720]	; (800133c <updateLEDMatrix4+0x330>)
 800106c:	f001 fcba 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001076:	48b1      	ldr	r0, [pc, #708]	; (800133c <updateLEDMatrix4+0x330>)
 8001078:	f001 fcb4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	48ae      	ldr	r0, [pc, #696]	; (800133c <updateLEDMatrix4+0x330>)
 8001084:	f001 fcae 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	48ab      	ldr	r0, [pc, #684]	; (800133c <updateLEDMatrix4+0x330>)
 8001090:	f001 fca8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	48a8      	ldr	r0, [pc, #672]	; (800133c <updateLEDMatrix4+0x330>)
 800109c:	f001 fca2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	48a5      	ldr	r0, [pc, #660]	; (800133c <updateLEDMatrix4+0x330>)
 80010a8:	f001 fc9c 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b2:	48a1      	ldr	r0, [pc, #644]	; (8001338 <updateLEDMatrix4+0x32c>)
 80010b4:	f001 fc96 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80010b8:	e178      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2104      	movs	r1, #4
 80010be:	489f      	ldr	r0, [pc, #636]	; (800133c <updateLEDMatrix4+0x330>)
 80010c0:	f001 fc90 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2108      	movs	r1, #8
 80010c8:	489c      	ldr	r0, [pc, #624]	; (800133c <updateLEDMatrix4+0x330>)
 80010ca:	f001 fc8b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4899      	ldr	r0, [pc, #612]	; (800133c <updateLEDMatrix4+0x330>)
 80010d6:	f001 fc85 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	4896      	ldr	r0, [pc, #600]	; (800133c <updateLEDMatrix4+0x330>)
 80010e2:	f001 fc7f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	4893      	ldr	r0, [pc, #588]	; (800133c <updateLEDMatrix4+0x330>)
 80010ee:	f001 fc79 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	4890      	ldr	r0, [pc, #576]	; (800133c <updateLEDMatrix4+0x330>)
 80010fa:	f001 fc73 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001104:	488d      	ldr	r0, [pc, #564]	; (800133c <updateLEDMatrix4+0x330>)
 8001106:	f001 fc6d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	488a      	ldr	r0, [pc, #552]	; (800133c <updateLEDMatrix4+0x330>)
 8001112:	f001 fc67 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	4886      	ldr	r0, [pc, #536]	; (8001338 <updateLEDMatrix4+0x32c>)
 800111e:	f001 fc61 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001122:	e143      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	4884      	ldr	r0, [pc, #528]	; (800133c <updateLEDMatrix4+0x330>)
 800112a:	f001 fc5b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	4882      	ldr	r0, [pc, #520]	; (800133c <updateLEDMatrix4+0x330>)
 8001134:	f001 fc56 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	487f      	ldr	r0, [pc, #508]	; (800133c <updateLEDMatrix4+0x330>)
 8001140:	f001 fc50 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	487c      	ldr	r0, [pc, #496]	; (800133c <updateLEDMatrix4+0x330>)
 800114c:	f001 fc4a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4879      	ldr	r0, [pc, #484]	; (800133c <updateLEDMatrix4+0x330>)
 8001158:	f001 fc44 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	4876      	ldr	r0, [pc, #472]	; (800133c <updateLEDMatrix4+0x330>)
 8001164:	f001 fc3e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	4873      	ldr	r0, [pc, #460]	; (800133c <updateLEDMatrix4+0x330>)
 8001170:	f001 fc38 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117a:	4870      	ldr	r0, [pc, #448]	; (800133c <updateLEDMatrix4+0x330>)
 800117c:	f001 fc32 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001186:	486c      	ldr	r0, [pc, #432]	; (8001338 <updateLEDMatrix4+0x32c>)
 8001188:	f001 fc2c 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800118c:	e10e      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2104      	movs	r1, #4
 8001192:	486a      	ldr	r0, [pc, #424]	; (800133c <updateLEDMatrix4+0x330>)
 8001194:	f001 fc26 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2108      	movs	r1, #8
 800119c:	4867      	ldr	r0, [pc, #412]	; (800133c <updateLEDMatrix4+0x330>)
 800119e:	f001 fc21 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4864      	ldr	r0, [pc, #400]	; (800133c <updateLEDMatrix4+0x330>)
 80011aa:	f001 fc1b 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4861      	ldr	r0, [pc, #388]	; (800133c <updateLEDMatrix4+0x330>)
 80011b6:	f001 fc15 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	485e      	ldr	r0, [pc, #376]	; (800133c <updateLEDMatrix4+0x330>)
 80011c2:	f001 fc0f 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	485b      	ldr	r0, [pc, #364]	; (800133c <updateLEDMatrix4+0x330>)
 80011ce:	f001 fc09 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d8:	4858      	ldr	r0, [pc, #352]	; (800133c <updateLEDMatrix4+0x330>)
 80011da:	f001 fc03 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e4:	4855      	ldr	r0, [pc, #340]	; (800133c <updateLEDMatrix4+0x330>)
 80011e6:	f001 fbfd 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4851      	ldr	r0, [pc, #324]	; (8001338 <updateLEDMatrix4+0x32c>)
 80011f2:	f001 fbf7 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80011f6:	e0d9      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	484f      	ldr	r0, [pc, #316]	; (800133c <updateLEDMatrix4+0x330>)
 80011fe:	f001 fbf1 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	484d      	ldr	r0, [pc, #308]	; (800133c <updateLEDMatrix4+0x330>)
 8001208:	f001 fbec 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	484a      	ldr	r0, [pc, #296]	; (800133c <updateLEDMatrix4+0x330>)
 8001214:	f001 fbe6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121e:	4847      	ldr	r0, [pc, #284]	; (800133c <updateLEDMatrix4+0x330>)
 8001220:	f001 fbe0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	4844      	ldr	r0, [pc, #272]	; (800133c <updateLEDMatrix4+0x330>)
 800122c:	f001 fbda 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4841      	ldr	r0, [pc, #260]	; (800133c <updateLEDMatrix4+0x330>)
 8001238:	f001 fbd4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001242:	483e      	ldr	r0, [pc, #248]	; (800133c <updateLEDMatrix4+0x330>)
 8001244:	f001 fbce 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	483b      	ldr	r0, [pc, #236]	; (800133c <updateLEDMatrix4+0x330>)
 8001250:	f001 fbc8 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4837      	ldr	r0, [pc, #220]	; (8001338 <updateLEDMatrix4+0x32c>)
 800125c:	f001 fbc2 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001260:	e0a4      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2104      	movs	r1, #4
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <updateLEDMatrix4+0x330>)
 8001268:	f001 fbbc 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2108      	movs	r1, #8
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <updateLEDMatrix4+0x330>)
 8001272:	f001 fbb7 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127c:	482f      	ldr	r0, [pc, #188]	; (800133c <updateLEDMatrix4+0x330>)
 800127e:	f001 fbb1 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	482c      	ldr	r0, [pc, #176]	; (800133c <updateLEDMatrix4+0x330>)
 800128a:	f001 fbab 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	4829      	ldr	r0, [pc, #164]	; (800133c <updateLEDMatrix4+0x330>)
 8001296:	f001 fba5 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <updateLEDMatrix4+0x330>)
 80012a2:	f001 fb9f 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <updateLEDMatrix4+0x330>)
 80012ae:	f001 fb99 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b8:	4820      	ldr	r0, [pc, #128]	; (800133c <updateLEDMatrix4+0x330>)
 80012ba:	f001 fb93 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	481c      	ldr	r0, [pc, #112]	; (8001338 <updateLEDMatrix4+0x32c>)
 80012c6:	f001 fb8d 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80012ca:	e06f      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2104      	movs	r1, #4
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <updateLEDMatrix4+0x330>)
 80012d2:	f001 fb87 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2108      	movs	r1, #8
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <updateLEDMatrix4+0x330>)
 80012dc:	f001 fb82 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	4815      	ldr	r0, [pc, #84]	; (800133c <updateLEDMatrix4+0x330>)
 80012e8:	f001 fb7c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f2:	4812      	ldr	r0, [pc, #72]	; (800133c <updateLEDMatrix4+0x330>)
 80012f4:	f001 fb76 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <updateLEDMatrix4+0x330>)
 8001300:	f001 fb70 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <updateLEDMatrix4+0x330>)
 800130c:	f001 fb6a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <updateLEDMatrix4+0x330>)
 8001318:	f001 fb64 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <updateLEDMatrix4+0x330>)
 8001324:	f001 fb5e 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <updateLEDMatrix4+0x32c>)
 8001330:	f001 fb58 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001334:	e03a      	b.n	80013ac <updateLEDMatrix4+0x3a0>
 8001336:	bf00      	nop
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001346:	f001 fb4d 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2108      	movs	r1, #8
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001350:	f001 fb48 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 800135c:	f001 fb42 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001368:	f001 fb3c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001374:	f001 fb36 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001380:	f001 fb30 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 800138c:	f001 fb2a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001398:	f001 fb24 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <updateLEDMatrix4+0x3ac>)
 80013a4:	f001 fb1e 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 80013a8:	e000      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	default:
		break;
 80013aa:	bf00      	nop
	}
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00

080013bc <updateLEDMatrix5>:
void updateLEDMatrix5(int index){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013ca:	48c7      	ldr	r0, [pc, #796]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80013cc:	f001 fb0a 	bl	80029e4 <HAL_GPIO_WritePin>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	f200 81c1 	bhi.w	800175a <updateLEDMatrix5+0x39e>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <updateLEDMatrix5+0x24>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001401 	.word	0x08001401
 80013e4:	0800146b 	.word	0x0800146b
 80013e8:	080014d5 	.word	0x080014d5
 80013ec:	0800153f 	.word	0x0800153f
 80013f0:	080015a9 	.word	0x080015a9
 80013f4:	08001613 	.word	0x08001613
 80013f8:	0800167d 	.word	0x0800167d
 80013fc:	080016f1 	.word	0x080016f1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	48b9      	ldr	r0, [pc, #740]	; (80016ec <updateLEDMatrix5+0x330>)
 8001406:	f001 faed 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2108      	movs	r1, #8
 800140e:	48b7      	ldr	r0, [pc, #732]	; (80016ec <updateLEDMatrix5+0x330>)
 8001410:	f001 fae8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	48b4      	ldr	r0, [pc, #720]	; (80016ec <updateLEDMatrix5+0x330>)
 800141c:	f001 fae2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001426:	48b1      	ldr	r0, [pc, #708]	; (80016ec <updateLEDMatrix5+0x330>)
 8001428:	f001 fadc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	48ae      	ldr	r0, [pc, #696]	; (80016ec <updateLEDMatrix5+0x330>)
 8001434:	f001 fad6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	48ab      	ldr	r0, [pc, #684]	; (80016ec <updateLEDMatrix5+0x330>)
 8001440:	f001 fad0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144a:	48a8      	ldr	r0, [pc, #672]	; (80016ec <updateLEDMatrix5+0x330>)
 800144c:	f001 faca 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	48a5      	ldr	r0, [pc, #660]	; (80016ec <updateLEDMatrix5+0x330>)
 8001458:	f001 fac4 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001462:	48a1      	ldr	r0, [pc, #644]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001464:	f001 fabe 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001468:	e178      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	489f      	ldr	r0, [pc, #636]	; (80016ec <updateLEDMatrix5+0x330>)
 8001470:	f001 fab8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2108      	movs	r1, #8
 8001478:	489c      	ldr	r0, [pc, #624]	; (80016ec <updateLEDMatrix5+0x330>)
 800147a:	f001 fab3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	4899      	ldr	r0, [pc, #612]	; (80016ec <updateLEDMatrix5+0x330>)
 8001486:	f001 faad 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4896      	ldr	r0, [pc, #600]	; (80016ec <updateLEDMatrix5+0x330>)
 8001492:	f001 faa7 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4893      	ldr	r0, [pc, #588]	; (80016ec <updateLEDMatrix5+0x330>)
 800149e:	f001 faa1 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a8:	4890      	ldr	r0, [pc, #576]	; (80016ec <updateLEDMatrix5+0x330>)
 80014aa:	f001 fa9b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b4:	488d      	ldr	r0, [pc, #564]	; (80016ec <updateLEDMatrix5+0x330>)
 80014b6:	f001 fa95 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c0:	488a      	ldr	r0, [pc, #552]	; (80016ec <updateLEDMatrix5+0x330>)
 80014c2:	f001 fa8f 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	4886      	ldr	r0, [pc, #536]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80014ce:	f001 fa89 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80014d2:	e143      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	4884      	ldr	r0, [pc, #528]	; (80016ec <updateLEDMatrix5+0x330>)
 80014da:	f001 fa83 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2108      	movs	r1, #8
 80014e2:	4882      	ldr	r0, [pc, #520]	; (80016ec <updateLEDMatrix5+0x330>)
 80014e4:	f001 fa7e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ee:	487f      	ldr	r0, [pc, #508]	; (80016ec <updateLEDMatrix5+0x330>)
 80014f0:	f001 fa78 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fa:	487c      	ldr	r0, [pc, #496]	; (80016ec <updateLEDMatrix5+0x330>)
 80014fc:	f001 fa72 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001506:	4879      	ldr	r0, [pc, #484]	; (80016ec <updateLEDMatrix5+0x330>)
 8001508:	f001 fa6c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	4876      	ldr	r0, [pc, #472]	; (80016ec <updateLEDMatrix5+0x330>)
 8001514:	f001 fa66 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4873      	ldr	r0, [pc, #460]	; (80016ec <updateLEDMatrix5+0x330>)
 8001520:	f001 fa60 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152a:	4870      	ldr	r0, [pc, #448]	; (80016ec <updateLEDMatrix5+0x330>)
 800152c:	f001 fa5a 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	486c      	ldr	r0, [pc, #432]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001538:	f001 fa54 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800153c:	e10e      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 3:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2104      	movs	r1, #4
 8001542:	486a      	ldr	r0, [pc, #424]	; (80016ec <updateLEDMatrix5+0x330>)
 8001544:	f001 fa4e 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2108      	movs	r1, #8
 800154c:	4867      	ldr	r0, [pc, #412]	; (80016ec <updateLEDMatrix5+0x330>)
 800154e:	f001 fa49 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4864      	ldr	r0, [pc, #400]	; (80016ec <updateLEDMatrix5+0x330>)
 800155a:	f001 fa43 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	4861      	ldr	r0, [pc, #388]	; (80016ec <updateLEDMatrix5+0x330>)
 8001566:	f001 fa3d 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	485e      	ldr	r0, [pc, #376]	; (80016ec <updateLEDMatrix5+0x330>)
 8001572:	f001 fa37 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	485b      	ldr	r0, [pc, #364]	; (80016ec <updateLEDMatrix5+0x330>)
 800157e:	f001 fa31 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4858      	ldr	r0, [pc, #352]	; (80016ec <updateLEDMatrix5+0x330>)
 800158a:	f001 fa2b 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001594:	4855      	ldr	r0, [pc, #340]	; (80016ec <updateLEDMatrix5+0x330>)
 8001596:	f001 fa25 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4851      	ldr	r0, [pc, #324]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80015a2:	f001 fa1f 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80015a6:	e0d9      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	484f      	ldr	r0, [pc, #316]	; (80016ec <updateLEDMatrix5+0x330>)
 80015ae:	f001 fa19 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2108      	movs	r1, #8
 80015b6:	484d      	ldr	r0, [pc, #308]	; (80016ec <updateLEDMatrix5+0x330>)
 80015b8:	f001 fa14 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	484a      	ldr	r0, [pc, #296]	; (80016ec <updateLEDMatrix5+0x330>)
 80015c4:	f001 fa0e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ce:	4847      	ldr	r0, [pc, #284]	; (80016ec <updateLEDMatrix5+0x330>)
 80015d0:	f001 fa08 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	4844      	ldr	r0, [pc, #272]	; (80016ec <updateLEDMatrix5+0x330>)
 80015dc:	f001 fa02 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e6:	4841      	ldr	r0, [pc, #260]	; (80016ec <updateLEDMatrix5+0x330>)
 80015e8:	f001 f9fc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	483e      	ldr	r0, [pc, #248]	; (80016ec <updateLEDMatrix5+0x330>)
 80015f4:	f001 f9f6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fe:	483b      	ldr	r0, [pc, #236]	; (80016ec <updateLEDMatrix5+0x330>)
 8001600:	f001 f9f0 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	4837      	ldr	r0, [pc, #220]	; (80016e8 <updateLEDMatrix5+0x32c>)
 800160c:	f001 f9ea 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001610:	e0a4      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 5:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2104      	movs	r1, #4
 8001616:	4835      	ldr	r0, [pc, #212]	; (80016ec <updateLEDMatrix5+0x330>)
 8001618:	f001 f9e4 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	4832      	ldr	r0, [pc, #200]	; (80016ec <updateLEDMatrix5+0x330>)
 8001622:	f001 f9df 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <updateLEDMatrix5+0x330>)
 800162e:	f001 f9d9 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	482c      	ldr	r0, [pc, #176]	; (80016ec <updateLEDMatrix5+0x330>)
 800163a:	f001 f9d3 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <updateLEDMatrix5+0x330>)
 8001646:	f001 f9cd 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001650:	4826      	ldr	r0, [pc, #152]	; (80016ec <updateLEDMatrix5+0x330>)
 8001652:	f001 f9c7 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <updateLEDMatrix5+0x330>)
 800165e:	f001 f9c1 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001668:	4820      	ldr	r0, [pc, #128]	; (80016ec <updateLEDMatrix5+0x330>)
 800166a:	f001 f9bb 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001674:	481c      	ldr	r0, [pc, #112]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001676:	f001 f9b5 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800167a:	e06f      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 6:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2104      	movs	r1, #4
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <updateLEDMatrix5+0x330>)
 8001682:	f001 f9af 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2108      	movs	r1, #8
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <updateLEDMatrix5+0x330>)
 800168c:	f001 f9aa 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <updateLEDMatrix5+0x330>)
 8001698:	f001 f9a4 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <updateLEDMatrix5+0x330>)
 80016a4:	f001 f99e 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <updateLEDMatrix5+0x330>)
 80016b0:	f001 f998 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <updateLEDMatrix5+0x330>)
 80016bc:	f001 f992 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <updateLEDMatrix5+0x330>)
 80016c8:	f001 f98c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <updateLEDMatrix5+0x330>)
 80016d4:	f001 f986 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016de:	4802      	ldr	r0, [pc, #8]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80016e0:	f001 f980 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80016e4:	e03a      	b.n	800175c <updateLEDMatrix5+0x3a0>
 80016e6:	bf00      	nop
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40010800 	.word	0x40010800
	case 7:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2104      	movs	r1, #4
 80016f4:	481b      	ldr	r0, [pc, #108]	; (8001764 <updateLEDMatrix5+0x3a8>)
 80016f6:	f001 f975 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2108      	movs	r1, #8
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001700:	f001 f970 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <updateLEDMatrix5+0x3a8>)
 800170c:	f001 f96a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001718:	f001 f964 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001724:	f001 f95e 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001730:	f001 f958 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <updateLEDMatrix5+0x3a8>)
 800173c:	f001 f952 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001748:	f001 f94c 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <updateLEDMatrix5+0x3ac>)
 8001754:	f001 f946 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8001758:	e000      	b.n	800175c <updateLEDMatrix5+0x3a0>
	default:
		break;
 800175a:	bf00      	nop
	}
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00

0800176c <updateLEDMatrix6>:
void updateLEDMatrix6(int index){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800177a:	48c7      	ldr	r0, [pc, #796]	; (8001a98 <updateLEDMatrix6+0x32c>)
 800177c:	f001 f932 	bl	80029e4 <HAL_GPIO_WritePin>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b07      	cmp	r3, #7
 8001784:	f200 81c1 	bhi.w	8001b0a <updateLEDMatrix6+0x39e>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <updateLEDMatrix6+0x24>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017b1 	.word	0x080017b1
 8001794:	0800181b 	.word	0x0800181b
 8001798:	08001885 	.word	0x08001885
 800179c:	080018ef 	.word	0x080018ef
 80017a0:	08001959 	.word	0x08001959
 80017a4:	080019c3 	.word	0x080019c3
 80017a8:	08001a2d 	.word	0x08001a2d
 80017ac:	08001aa1 	.word	0x08001aa1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2104      	movs	r1, #4
 80017b4:	48b9      	ldr	r0, [pc, #740]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017b6:	f001 f915 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2108      	movs	r1, #8
 80017be:	48b7      	ldr	r0, [pc, #732]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017c0:	f001 f910 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	48b4      	ldr	r0, [pc, #720]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017cc:	f001 f90a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d6:	48b1      	ldr	r0, [pc, #708]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017d8:	f001 f904 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	48ae      	ldr	r0, [pc, #696]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017e4:	f001 f8fe 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	48ab      	ldr	r0, [pc, #684]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017f0:	f001 f8f8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	48a8      	ldr	r0, [pc, #672]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017fc:	f001 f8f2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	48a5      	ldr	r0, [pc, #660]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001808:	f001 f8ec 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001812:	48a1      	ldr	r0, [pc, #644]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001814:	f001 f8e6 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001818:	e178      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2104      	movs	r1, #4
 800181e:	489f      	ldr	r0, [pc, #636]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001820:	f001 f8e0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2108      	movs	r1, #8
 8001828:	489c      	ldr	r0, [pc, #624]	; (8001a9c <updateLEDMatrix6+0x330>)
 800182a:	f001 f8db 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001834:	4899      	ldr	r0, [pc, #612]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001836:	f001 f8d5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001840:	4896      	ldr	r0, [pc, #600]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001842:	f001 f8cf 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184c:	4893      	ldr	r0, [pc, #588]	; (8001a9c <updateLEDMatrix6+0x330>)
 800184e:	f001 f8c9 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001858:	4890      	ldr	r0, [pc, #576]	; (8001a9c <updateLEDMatrix6+0x330>)
 800185a:	f001 f8c3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001864:	488d      	ldr	r0, [pc, #564]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001866:	f001 f8bd 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001870:	488a      	ldr	r0, [pc, #552]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001872:	f001 f8b7 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187c:	4886      	ldr	r0, [pc, #536]	; (8001a98 <updateLEDMatrix6+0x32c>)
 800187e:	f001 f8b1 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001882:	e143      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2104      	movs	r1, #4
 8001888:	4884      	ldr	r0, [pc, #528]	; (8001a9c <updateLEDMatrix6+0x330>)
 800188a:	f001 f8ab 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2108      	movs	r1, #8
 8001892:	4882      	ldr	r0, [pc, #520]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001894:	f001 f8a6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189e:	487f      	ldr	r0, [pc, #508]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018a0:	f001 f8a0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	487c      	ldr	r0, [pc, #496]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018ac:	f001 f89a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	4879      	ldr	r0, [pc, #484]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018b8:	f001 f894 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4876      	ldr	r0, [pc, #472]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018c4:	f001 f88e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ce:	4873      	ldr	r0, [pc, #460]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018d0:	f001 f888 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018da:	4870      	ldr	r0, [pc, #448]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018dc:	f001 f882 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e6:	486c      	ldr	r0, [pc, #432]	; (8001a98 <updateLEDMatrix6+0x32c>)
 80018e8:	f001 f87c 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80018ec:	e10e      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2104      	movs	r1, #4
 80018f2:	486a      	ldr	r0, [pc, #424]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018f4:	f001 f876 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2108      	movs	r1, #8
 80018fc:	4867      	ldr	r0, [pc, #412]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018fe:	f001 f871 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <updateLEDMatrix6+0x330>)
 800190a:	f001 f86b 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001914:	4861      	ldr	r0, [pc, #388]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001916:	f001 f865 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001920:	485e      	ldr	r0, [pc, #376]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001922:	f001 f85f 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192c:	485b      	ldr	r0, [pc, #364]	; (8001a9c <updateLEDMatrix6+0x330>)
 800192e:	f001 f859 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001938:	4858      	ldr	r0, [pc, #352]	; (8001a9c <updateLEDMatrix6+0x330>)
 800193a:	f001 f853 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001944:	4855      	ldr	r0, [pc, #340]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001946:	f001 f84d 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001950:	4851      	ldr	r0, [pc, #324]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001952:	f001 f847 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001956:	e0d9      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2104      	movs	r1, #4
 800195c:	484f      	ldr	r0, [pc, #316]	; (8001a9c <updateLEDMatrix6+0x330>)
 800195e:	f001 f841 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2108      	movs	r1, #8
 8001966:	484d      	ldr	r0, [pc, #308]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001968:	f001 f83c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001972:	484a      	ldr	r0, [pc, #296]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001974:	f001 f836 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197e:	4847      	ldr	r0, [pc, #284]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001980:	f001 f830 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198a:	4844      	ldr	r0, [pc, #272]	; (8001a9c <updateLEDMatrix6+0x330>)
 800198c:	f001 f82a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	4841      	ldr	r0, [pc, #260]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001998:	f001 f824 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	483e      	ldr	r0, [pc, #248]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019a4:	f001 f81e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ae:	483b      	ldr	r0, [pc, #236]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019b0:	f001 f818 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4837      	ldr	r0, [pc, #220]	; (8001a98 <updateLEDMatrix6+0x32c>)
 80019bc:	f001 f812 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80019c0:	e0a4      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2104      	movs	r1, #4
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019c8:	f001 f80c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2108      	movs	r1, #8
 80019d0:	4832      	ldr	r0, [pc, #200]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019d2:	f001 f807 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	482f      	ldr	r0, [pc, #188]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019de:	f001 f801 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e8:	482c      	ldr	r0, [pc, #176]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019ea:	f000 fffb 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f4:	4829      	ldr	r0, [pc, #164]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019f6:	f000 fff5 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	4826      	ldr	r0, [pc, #152]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a02:	f000 ffef 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0c:	4823      	ldr	r0, [pc, #140]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a0e:	f000 ffe9 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a18:	4820      	ldr	r0, [pc, #128]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a1a:	f000 ffe3 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001a26:	f000 ffdd 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001a2a:	e06f      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a32:	f000 ffd7 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a3c:	f000 ffd2 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a48:	f000 ffcc 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a54:	f000 ffc6 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a60:	f000 ffc0 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a6c:	f000 ffba 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a78:	f000 ffb4 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a84:	f000 ffae 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8e:	4802      	ldr	r0, [pc, #8]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001a90:	f000 ffa8 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001a94:	e03a      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
 8001a96:	bf00      	nop
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001aa6:	f000 ff9d 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2108      	movs	r1, #8
 8001aae:	4819      	ldr	r0, [pc, #100]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ab0:	f000 ff98 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aba:	4816      	ldr	r0, [pc, #88]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001abc:	f000 ff92 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	4813      	ldr	r0, [pc, #76]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ac8:	f000 ff8c 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ad4:	f000 ff86 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ae0:	f000 ff80 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001aec:	f000 ff7a 	bl	80029e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001af8:	f000 ff74 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <updateLEDMatrix6+0x3ac>)
 8001b04:	f000 ff6e 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8001b08:	e000      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	default:
		break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00

08001b1c <updateLEDMatrix7>:
void updateLEDMatrix7(int index){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b2a:	48c7      	ldr	r0, [pc, #796]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001b2c:	f000 ff5a 	bl	80029e4 <HAL_GPIO_WritePin>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	f200 81c1 	bhi.w	8001eba <updateLEDMatrix7+0x39e>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <updateLEDMatrix7+0x24>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b61 	.word	0x08001b61
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001c35 	.word	0x08001c35
 8001b4c:	08001c9f 	.word	0x08001c9f
 8001b50:	08001d09 	.word	0x08001d09
 8001b54:	08001d73 	.word	0x08001d73
 8001b58:	08001ddd 	.word	0x08001ddd
 8001b5c:	08001e51 	.word	0x08001e51
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2104      	movs	r1, #4
 8001b64:	48b9      	ldr	r0, [pc, #740]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b66:	f000 ff3d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	48b7      	ldr	r0, [pc, #732]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b70:	f000 ff38 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	48b4      	ldr	r0, [pc, #720]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b7c:	f000 ff32 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b86:	48b1      	ldr	r0, [pc, #708]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b88:	f000 ff2c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	48ae      	ldr	r0, [pc, #696]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b94:	f000 ff26 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	48ab      	ldr	r0, [pc, #684]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001ba0:	f000 ff20 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	48a8      	ldr	r0, [pc, #672]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bac:	f000 ff1a 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb6:	48a5      	ldr	r0, [pc, #660]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bb8:	f000 ff14 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	48a1      	ldr	r0, [pc, #644]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001bc4:	f000 ff0e 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001bc8:	e178      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2104      	movs	r1, #4
 8001bce:	489f      	ldr	r0, [pc, #636]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bd0:	f000 ff08 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	489c      	ldr	r0, [pc, #624]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bda:	f000 ff03 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be4:	4899      	ldr	r0, [pc, #612]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001be6:	f000 fefd 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf0:	4896      	ldr	r0, [pc, #600]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bf2:	f000 fef7 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfc:	4893      	ldr	r0, [pc, #588]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bfe:	f000 fef1 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c08:	4890      	ldr	r0, [pc, #576]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c0a:	f000 feeb 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c14:	488d      	ldr	r0, [pc, #564]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c16:	f000 fee5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c20:	488a      	ldr	r0, [pc, #552]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c22:	f000 fedf 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2c:	4886      	ldr	r0, [pc, #536]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001c2e:	f000 fed9 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001c32:	e143      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2104      	movs	r1, #4
 8001c38:	4884      	ldr	r0, [pc, #528]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c3a:	f000 fed3 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2108      	movs	r1, #8
 8001c42:	4882      	ldr	r0, [pc, #520]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c44:	f000 fece 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	487f      	ldr	r0, [pc, #508]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c50:	f000 fec8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5a:	487c      	ldr	r0, [pc, #496]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c5c:	f000 fec2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4879      	ldr	r0, [pc, #484]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c68:	f000 febc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	4876      	ldr	r0, [pc, #472]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c74:	f000 feb6 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c80:	f000 feb0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8a:	4870      	ldr	r0, [pc, #448]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c8c:	f000 feaa 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c96:	486c      	ldr	r0, [pc, #432]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001c98:	f000 fea4 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001c9c:	e10e      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	486a      	ldr	r0, [pc, #424]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001ca4:	f000 fe9e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2108      	movs	r1, #8
 8001cac:	4867      	ldr	r0, [pc, #412]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cae:	f000 fe99 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cba:	f000 fe93 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc4:	4861      	ldr	r0, [pc, #388]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cc6:	f000 fe8d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd0:	485e      	ldr	r0, [pc, #376]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cd2:	f000 fe87 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cdc:	485b      	ldr	r0, [pc, #364]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cde:	f000 fe81 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce8:	4858      	ldr	r0, [pc, #352]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cea:	f000 fe7b 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf4:	4855      	ldr	r0, [pc, #340]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cf6:	f000 fe75 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d00:	4851      	ldr	r0, [pc, #324]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001d02:	f000 fe6f 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001d06:	e0d9      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	484f      	ldr	r0, [pc, #316]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d0e:	f000 fe69 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2108      	movs	r1, #8
 8001d16:	484d      	ldr	r0, [pc, #308]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d18:	f000 fe64 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d22:	484a      	ldr	r0, [pc, #296]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d24:	f000 fe5e 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2e:	4847      	ldr	r0, [pc, #284]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d30:	f000 fe58 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4844      	ldr	r0, [pc, #272]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d3c:	f000 fe52 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d46:	4841      	ldr	r0, [pc, #260]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d48:	f000 fe4c 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d52:	483e      	ldr	r0, [pc, #248]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d54:	f000 fe46 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d60:	f000 fe40 	bl	80029e4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4837      	ldr	r0, [pc, #220]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001d6c:	f000 fe3a 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001d70:	e0a4      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2104      	movs	r1, #4
 8001d76:	4835      	ldr	r0, [pc, #212]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d78:	f000 fe34 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4832      	ldr	r0, [pc, #200]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d82:	f000 fe2f 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8c:	482f      	ldr	r0, [pc, #188]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d8e:	f000 fe29 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d98:	482c      	ldr	r0, [pc, #176]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d9a:	f000 fe23 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	4829      	ldr	r0, [pc, #164]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001da6:	f000 fe1d 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db0:	4826      	ldr	r0, [pc, #152]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001db2:	f000 fe17 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbc:	4823      	ldr	r0, [pc, #140]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dbe:	f000 fe11 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	4820      	ldr	r0, [pc, #128]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dca:	f000 fe0b 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001dd6:	f000 fe05 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001dda:	e06f      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2104      	movs	r1, #4
 8001de0:	481a      	ldr	r0, [pc, #104]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001de2:	f000 fdff 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2108      	movs	r1, #8
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dec:	f000 fdfa 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	4815      	ldr	r0, [pc, #84]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001df8:	f000 fdf4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e04:	f000 fdee 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	480f      	ldr	r0, [pc, #60]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e10:	f000 fde8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e1c:	f000 fde2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e28:	f000 fddc 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e34:	f000 fdd6 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001e40:	f000 fdd0 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001e44:	e03a      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
 8001e46:	bf00      	nop
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	2104      	movs	r1, #4
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e56:	f000 fdc5 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	4819      	ldr	r0, [pc, #100]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e60:	f000 fdc0 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e6c:	f000 fdba 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e78:	f000 fdb4 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e84:	f000 fdae 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e90:	f000 fda8 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9a:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e9c:	f000 fda2 	bl	80029e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001ea8:	f000 fd9c 	bl	80029e4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <updateLEDMatrix7+0x3ac>)
 8001eb4:	f000 fd96 	bl	80029e4 <HAL_GPIO_WritePin>
		break;
 8001eb8:	e000      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	default:
		break;
 8001eba:	bf00      	nop
	}
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <init_exercise1>:
	led_buffer[0]=hour/10;
	led_buffer[1]=hour%10;
	led_buffer[2]=minute/10;
	led_buffer[3]=minute%10;
}
void init_exercise1(){}
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setTimer(0,0);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 f999 	bl	8002218 <setTimer>
  setTimer(1,0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f000 f995 	bl	8002218 <setTimer>
  setTimer(2,25);
 8001eee:	2119      	movs	r1, #25
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f000 f991 	bl	8002218 <setTimer>
  setTimer(3,50);
 8001ef6:	2132      	movs	r1, #50	; 0x32
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f98d 	bl	8002218 <setTimer>
  setTimer(4,75);
 8001efe:	214b      	movs	r1, #75	; 0x4b
 8001f00:	2004      	movs	r0, #4
 8001f02:	f000 f989 	bl	8002218 <setTimer>
  setTimer(5,0);
 8001f06:	2100      	movs	r1, #0
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f000 f985 	bl	8002218 <setTimer>
  setTimer(6,0);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2006      	movs	r0, #6
 8001f12:	f000 f981 	bl	8002218 <setTimer>
//  int hour=15, minute=8,second=50;
  int haha=0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  int status=0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1e:	f000 fa77 	bl	8002410 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_exercise1();
 8001f22:	f7ff ffd3 	bl	8001ecc <init_exercise1>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f26:	f000 f889 	bl	800203c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001f2a:	f000 f8c3 	bl	80020b4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001f2e:	f000 f90d 	bl	800214c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001f32:	483e      	ldr	r0, [pc, #248]	; (800202c <main+0x154>)
 8001f34:	f001 f9b4 	bl	80032a0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (timer_flag[0]==1){
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <main+0x158>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10c      	bne.n	8001f5a <main+0x82>
		  setTimer(0,100);
 8001f40:	2164      	movs	r1, #100	; 0x64
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f968 	bl	8002218 <setTimer>
		  HAL_GPIO_TogglePin(pa5_GPIO_Port, pa5_Pin);
 8001f48:	2120      	movs	r1, #32
 8001f4a:	483a      	ldr	r0, [pc, #232]	; (8002034 <main+0x15c>)
 8001f4c:	f000 fd62 	bl	8002a14 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(pa4_GPIO_Port, pa4_Pin,SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2110      	movs	r1, #16
 8001f54:	4837      	ldr	r0, [pc, #220]	; (8002034 <main+0x15c>)
 8001f56:	f000 fd45 	bl	80029e4 <HAL_GPIO_WritePin>
//		  if (hour>=24){
//			  hour=0;
//		  }
//		  updateClockBuffer(hour,minute);
//	  }
	  if (timer_flag[6]==1){
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <main+0x158>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d1ea      	bne.n	8001f38 <main+0x60>
		  setTimer(6,1);
 8001f62:	2101      	movs	r1, #1
 8001f64:	2006      	movs	r0, #6
 8001f66:	f000 f957 	bl	8002218 <setTimer>
		  if (status>=0&&status<24){updateLEDMatrix0(haha);}
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db05      	blt.n	8001f7c <main+0xa4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b17      	cmp	r3, #23
 8001f74:	dc02      	bgt.n	8001f7c <main+0xa4>
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe f8e8 	bl	800014c <updateLEDMatrix0>
		  if (status>=24&&status<48){updateLEDMatrix1(haha);}
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b17      	cmp	r3, #23
 8001f80:	dd05      	ble.n	8001f8e <main+0xb6>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b2f      	cmp	r3, #47	; 0x2f
 8001f86:	dc02      	bgt.n	8001f8e <main+0xb6>
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe fab7 	bl	80004fc <updateLEDMatrix1>
		  if (status>=48&&status<72){updateLEDMatrix2(haha);}
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b2f      	cmp	r3, #47	; 0x2f
 8001f92:	dd05      	ble.n	8001fa0 <main+0xc8>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b47      	cmp	r3, #71	; 0x47
 8001f98:	dc02      	bgt.n	8001fa0 <main+0xc8>
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fc86 	bl	80008ac <updateLEDMatrix2>
		  if (status>=72&&status<96){updateLEDMatrix3(haha);}
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b47      	cmp	r3, #71	; 0x47
 8001fa4:	dd05      	ble.n	8001fb2 <main+0xda>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b5f      	cmp	r3, #95	; 0x5f
 8001faa:	dc02      	bgt.n	8001fb2 <main+0xda>
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fe55 	bl	8000c5c <updateLEDMatrix3>
		  if (status>=96&&status<120){updateLEDMatrix4(haha);}
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b5f      	cmp	r3, #95	; 0x5f
 8001fb6:	dd05      	ble.n	8001fc4 <main+0xec>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b77      	cmp	r3, #119	; 0x77
 8001fbc:	dc02      	bgt.n	8001fc4 <main+0xec>
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff f824 	bl	800100c <updateLEDMatrix4>
		  if (status>=120&&status<144){updateLEDMatrix5(haha);}
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b77      	cmp	r3, #119	; 0x77
 8001fc8:	dd05      	ble.n	8001fd6 <main+0xfe>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b8f      	cmp	r3, #143	; 0x8f
 8001fce:	dc02      	bgt.n	8001fd6 <main+0xfe>
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff f9f3 	bl	80013bc <updateLEDMatrix5>
		  if (status>=144&&status<168){updateLEDMatrix6(haha);}
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b8f      	cmp	r3, #143	; 0x8f
 8001fda:	dd05      	ble.n	8001fe8 <main+0x110>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2ba7      	cmp	r3, #167	; 0xa7
 8001fe0:	dc02      	bgt.n	8001fe8 <main+0x110>
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fbc2 	bl	800176c <updateLEDMatrix6>
		  if (status>=168&&status<196){updateLEDMatrix7(haha);}
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2ba7      	cmp	r3, #167	; 0xa7
 8001fec:	dd05      	ble.n	8001ffa <main+0x122>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2bc3      	cmp	r3, #195	; 0xc3
 8001ff2:	dc02      	bgt.n	8001ffa <main+0x122>
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fd91 	bl	8001b1c <updateLEDMatrix7>
		  //updateLEDMatrix2(haha);
		  haha=(haha+1)%8;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	425a      	negs	r2, r3
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	f002 0207 	and.w	r2, r2, #7
 8002008:	bf58      	it	pl
 800200a:	4253      	negpl	r3, r2
 800200c:	607b      	str	r3, [r7, #4]
		  status=(status+1)%196;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <main+0x160>)
 8002014:	fb82 1203 	smull	r1, r2, r2, r3
 8002018:	1191      	asrs	r1, r2, #6
 800201a:	17da      	asrs	r2, r3, #31
 800201c:	1a8a      	subs	r2, r1, r2
 800201e:	21c4      	movs	r1, #196	; 0xc4
 8002020:	fb01 f202 	mul.w	r2, r1, r2
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	603b      	str	r3, [r7, #0]
	  if (timer_flag[0]==1){
 8002028:	e786      	b.n	8001f38 <main+0x60>
 800202a:	bf00      	nop
 800202c:	20000028 	.word	0x20000028
 8002030:	20000098 	.word	0x20000098
 8002034:	40010800 	.word	0x40010800
 8002038:	5397829d 	.word	0x5397829d

0800203c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b090      	sub	sp, #64	; 0x40
 8002040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	2228      	movs	r2, #40	; 0x28
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fcd8 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002062:	2301      	movs	r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002066:	2310      	movs	r3, #16
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206e:	f107 0318 	add.w	r3, r7, #24
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fce8 	bl	8002a48 <HAL_RCC_OscConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800207e:	f000 f8c5 	bl	800220c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002082:	230f      	movs	r3, #15
 8002084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f000 ff54 	bl	8002f48 <HAL_RCC_ClockConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020a6:	f000 f8b1 	bl	800220c <Error_Handler>
  }
}
 80020aa:	bf00      	nop
 80020ac:	3740      	adds	r7, #64	; 0x40
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	463b      	mov	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <MX_TIM2_Init+0x94>)
 80020d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MX_TIM2_Init+0x94>)
 80020da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80020de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_TIM2_Init+0x94>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_TIM2_Init+0x94>)
 80020e8:	220a      	movs	r2, #10
 80020ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_TIM2_Init+0x94>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_TIM2_Init+0x94>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f8:	4813      	ldr	r0, [pc, #76]	; (8002148 <MX_TIM2_Init+0x94>)
 80020fa:	f001 f881 	bl	8003200 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002104:	f000 f882 	bl	800220c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	4619      	mov	r1, r3
 8002114:	480c      	ldr	r0, [pc, #48]	; (8002148 <MX_TIM2_Init+0x94>)
 8002116:	f001 f9ff 	bl	8003518 <HAL_TIM_ConfigClockSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002120:	f000 f874 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_TIM2_Init+0x94>)
 8002132:	f001 fbd7 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800213c:	f000 f866 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000028 	.word	0x20000028

0800214c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <MX_GPIO_Init+0xa0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <MX_GPIO_Init+0xa0>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <MX_GPIO_Init+0xa0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MX_GPIO_Init+0xa0>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <MX_GPIO_Init+0xa0>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_GPIO_Init+0xa0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pa2_Pin|pa3_Pin|pa4_Pin|pa5_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8002196:	4816      	ldr	r0, [pc, #88]	; (80021f0 <MX_GPIO_Init+0xa4>)
 8002198:	f000 fc24 	bl	80029e4 <HAL_GPIO_WritePin>
                          |pa6_Pin|pa7_Pin|pa8_Pin|pa9_Pin
                          |pa10_Pin|pa11_Pin|pa12_Pin|pa13_Pin
                          |pa14_Pin|pa15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pb0_Pin|pb1_Pin|pb2_Pin|pb10_Pin
 800219c:	2200      	movs	r2, #0
 800219e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80021a2:	4814      	ldr	r0, [pc, #80]	; (80021f4 <MX_GPIO_Init+0xa8>)
 80021a4:	f000 fc1e 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pa2_Pin pa3_Pin pa4_Pin pa5_Pin
                           pa6_Pin pa7_Pin pa8_Pin pa9_Pin
                           pa10_Pin pa11_Pin pa12_Pin pa13_Pin
                           pa14_Pin pa15_Pin */
  GPIO_InitStruct.Pin = pa2_Pin|pa3_Pin|pa4_Pin|pa5_Pin
 80021a8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80021ac:	60bb      	str	r3, [r7, #8]
                          |pa6_Pin|pa7_Pin|pa8_Pin|pa9_Pin
                          |pa10_Pin|pa11_Pin|pa12_Pin|pa13_Pin
                          |pa14_Pin|pa15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2302      	movs	r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4619      	mov	r1, r3
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <MX_GPIO_Init+0xa4>)
 80021c2:	f000 fa95 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : pb0_Pin pb1_Pin pb2_Pin pb10_Pin
                           pb11_Pin pb12_Pin pb13_Pin pb14_Pin
                           pb15_Pin pb3_Pin pb4_Pin pb5_Pin
                           pb6_Pin pb8_Pin pb9_Pin */
  GPIO_InitStruct.Pin = pb0_Pin|pb1_Pin|pb2_Pin|pb10_Pin
 80021c6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80021ca:	60bb      	str	r3, [r7, #8]
                          |pb11_Pin|pb12_Pin|pb13_Pin|pb14_Pin
                          |pb15_Pin|pb3_Pin|pb4_Pin|pb5_Pin
                          |pb6_Pin|pb8_Pin|pb9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2302      	movs	r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_GPIO_Init+0xa8>)
 80021e0:	f000 fa86 	bl	80026f0 <HAL_GPIO_Init>

}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40010c00 	.word	0x40010c00

080021f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	timerRun();
 8002200:	f000 f822 	bl	8002248 <timerRun>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002214:	e7fe      	b.n	8002214 <Error_Handler+0x8>
	...

08002218 <setTimer>:
 *      Author: Phan Duc Loi
 */
#include "software_timer.h"
int timer_counter[10];
int timer_flag[10];
void setTimer(int index, int duration){
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
	timer_counter[index]=duration;
 8002222:	4907      	ldr	r1, [pc, #28]	; (8002240 <setTimer+0x28>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 800222c:	4a05      	ldr	r2, [pc, #20]	; (8002244 <setTimer+0x2c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2100      	movs	r1, #0
 8002232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000070 	.word	0x20000070
 8002244:	20000098 	.word	0x20000098

08002248 <timerRun>:
void timerRun(){
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
	for (int i=0;i<10;i++){
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	e01c      	b.n	800228e <timerRun+0x46>
		if (timer_counter[i]>=0){
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <timerRun+0x58>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db13      	blt.n	8002288 <timerRun+0x40>
			timer_counter[i]--;
 8002260:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <timerRun+0x58>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	490d      	ldr	r1, [pc, #52]	; (80022a0 <timerRun+0x58>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0){
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <timerRun+0x58>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	2b00      	cmp	r3, #0
 800227c:	dc04      	bgt.n	8002288 <timerRun+0x40>
				timer_flag[i]=1;
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <timerRun+0x5c>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2101      	movs	r1, #1
 8002284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<10;i++){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b09      	cmp	r3, #9
 8002292:	dddf      	ble.n	8002254 <timerRun+0xc>
			}
		}
	}
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000070 	.word	0x20000070
 80022a4:	20000098 	.word	0x20000098

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_MspInit+0x5c>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_MspInit+0x5c>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6193      	str	r3, [r2, #24]
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_MspInit+0x5c>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_MspInit+0x5c>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_MspInit+0x5c>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_MspInit+0x5c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_MspInit+0x60>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_MspInit+0x60>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d113      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_TIM_Base_MspInit+0x44>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_TIM_Base_MspInit+0x44>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_TIM_Base_MspInit+0x44>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	201c      	movs	r0, #28
 800233c:	f000 f9a1 	bl	8002682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002340:	201c      	movs	r0, #28
 8002342:	f000 f9ba 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239a:	f000 f87f 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM2_IRQHandler+0x10>)
 80023aa:	f000 ffc5 	bl	8003338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000028 	.word	0x20000028

080023b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c4:	f7ff fff8 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023ca:	490c      	ldr	r1, [pc, #48]	; (80023fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023e0:	4c09      	ldr	r4, [pc, #36]	; (8002408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f001 fae3 	bl	80039b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023f2:	f7ff fd71 	bl	8001ed8 <main>
  bx lr
 80023f6:	4770      	bx	lr
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002400:	08003a54 	.word	0x08003a54
  ldr r2, =_sbss
 8002404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002408:	200000c4 	.word	0x200000c4

0800240c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_2_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x28>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x28>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f923 	bl	800266c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	200f      	movs	r0, #15
 8002428:	f000 f808 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff ff3c 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40022000 	.word	0x40022000

0800243c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x54>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x58>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f93b 	bl	80026d6 <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e00e      	b.n	8002488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d80a      	bhi.n	8002486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f000 f903 	bl	8002682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_InitTick+0x5c>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000000 	.word	0x20000000
 8002494:	20000008 	.word	0x20000008
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_IncTick+0x1c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_IncTick+0x20>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_IncTick+0x20>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000008 	.word	0x20000008
 80024bc:	200000c0 	.word	0x200000c0

080024c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_GetTick+0x10>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	200000c0 	.word	0x200000c0

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4906      	ldr	r1, [pc, #24]	; (800256c <__NVIC_EnableIRQ+0x34>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002638:	d301      	bcc.n	800263e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263a:	2301      	movs	r3, #1
 800263c:	e00f      	b.n	800265e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <SysTick_Config+0x40>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002646:	210f      	movs	r1, #15
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f7ff ff90 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SysTick_Config+0x40>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SysTick_Config+0x40>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff2d 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff42 	bl	800251c <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff90 	bl	80025c4 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5f 	bl	8002570 <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff35 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffa2 	bl	8002628 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b08b      	sub	sp, #44	; 0x2c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	e148      	b.n	8002996 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002704:	2201      	movs	r2, #1
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8137 	bne.w	8002990 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4aa3      	ldr	r2, [pc, #652]	; (80029b4 <HAL_GPIO_Init+0x2c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d05e      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 800272c:	4aa1      	ldr	r2, [pc, #644]	; (80029b4 <HAL_GPIO_Init+0x2c4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d875      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002732:	4aa1      	ldr	r2, [pc, #644]	; (80029b8 <HAL_GPIO_Init+0x2c8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d058      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002738:	4a9f      	ldr	r2, [pc, #636]	; (80029b8 <HAL_GPIO_Init+0x2c8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d86f      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800273e:	4a9f      	ldr	r2, [pc, #636]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d052      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002744:	4a9d      	ldr	r2, [pc, #628]	; (80029bc <HAL_GPIO_Init+0x2cc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d869      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800274a:	4a9d      	ldr	r2, [pc, #628]	; (80029c0 <HAL_GPIO_Init+0x2d0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04c      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002750:	4a9b      	ldr	r2, [pc, #620]	; (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d863      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002756:	4a9b      	ldr	r2, [pc, #620]	; (80029c4 <HAL_GPIO_Init+0x2d4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d046      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 800275c:	4a99      	ldr	r2, [pc, #612]	; (80029c4 <HAL_GPIO_Init+0x2d4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d85d      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002762:	2b12      	cmp	r3, #18
 8002764:	d82a      	bhi.n	80027bc <HAL_GPIO_Init+0xcc>
 8002766:	2b12      	cmp	r3, #18
 8002768:	d859      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800276a:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <HAL_GPIO_Init+0x80>)
 800276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002770:	080027eb 	.word	0x080027eb
 8002774:	080027c5 	.word	0x080027c5
 8002778:	080027d7 	.word	0x080027d7
 800277c:	08002819 	.word	0x08002819
 8002780:	0800281f 	.word	0x0800281f
 8002784:	0800281f 	.word	0x0800281f
 8002788:	0800281f 	.word	0x0800281f
 800278c:	0800281f 	.word	0x0800281f
 8002790:	0800281f 	.word	0x0800281f
 8002794:	0800281f 	.word	0x0800281f
 8002798:	0800281f 	.word	0x0800281f
 800279c:	0800281f 	.word	0x0800281f
 80027a0:	0800281f 	.word	0x0800281f
 80027a4:	0800281f 	.word	0x0800281f
 80027a8:	0800281f 	.word	0x0800281f
 80027ac:	0800281f 	.word	0x0800281f
 80027b0:	0800281f 	.word	0x0800281f
 80027b4:	080027cd 	.word	0x080027cd
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	4a82      	ldr	r2, [pc, #520]	; (80029c8 <HAL_GPIO_Init+0x2d8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027c2:	e02c      	b.n	800281e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	623b      	str	r3, [r7, #32]
          break;
 80027ca:	e029      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	3304      	adds	r3, #4
 80027d2:	623b      	str	r3, [r7, #32]
          break;
 80027d4:	e024      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	3308      	adds	r3, #8
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e01f      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	330c      	adds	r3, #12
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e01a      	b.n	8002820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027f2:	2304      	movs	r3, #4
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e013      	b.n	8002820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002800:	2308      	movs	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	611a      	str	r2, [r3, #16]
          break;
 800280a:	e009      	b.n	8002820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800280c:	2308      	movs	r3, #8
 800280e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	615a      	str	r2, [r3, #20]
          break;
 8002816:	e003      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x130>
          break;
 800281e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d801      	bhi.n	800282a <HAL_GPIO_Init+0x13a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	e001      	b.n	800282e <HAL_GPIO_Init+0x13e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2bff      	cmp	r3, #255	; 0xff
 8002834:	d802      	bhi.n	800283c <HAL_GPIO_Init+0x14c>
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x152>
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	3b08      	subs	r3, #8
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	210f      	movs	r1, #15
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8090 	beq.w	8002990 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002870:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_GPIO_Init+0x2dc>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002888:	4a51      	ldr	r2, [pc, #324]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_GPIO_Init+0x2e4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_Init+0x1e0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x2e8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x1dc>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a47      	ldr	r2, [pc, #284]	; (80029dc <HAL_GPIO_Init+0x2ec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_Init+0x1d8>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1e2>
 80028d0:	2300      	movs	r3, #0
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e2:	493b      	ldr	r1, [pc, #236]	; (80029d0 <HAL_GPIO_Init+0x2e0>)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028fc:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4933      	ldr	r1, [pc, #204]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002914:	4013      	ands	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	492d      	ldr	r1, [pc, #180]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	4929      	ldr	r1, [pc, #164]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800293c:	4013      	ands	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4923      	ldr	r1, [pc, #140]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	491f      	ldr	r1, [pc, #124]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002964:	4013      	ands	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4919      	ldr	r1, [pc, #100]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4915      	ldr	r1, [pc, #84]	; (80029e0 <HAL_GPIO_Init+0x2f0>)
 800298c:	4013      	ands	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f47f aeaf 	bne.w	8002704 <HAL_GPIO_Init+0x14>
  }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	372c      	adds	r7, #44	; 0x2c
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	10320000 	.word	0x10320000
 80029b8:	10310000 	.word	0x10310000
 80029bc:	10220000 	.word	0x10220000
 80029c0:	10210000 	.word	0x10210000
 80029c4:	10120000 	.word	0x10120000
 80029c8:	10110000 	.word	0x10110000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40010800 	.word	0x40010800
 80029d8:	40010c00 	.word	0x40010c00
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43d9      	mvns	r1, r3
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	400b      	ands	r3, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e26c      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8087 	beq.w	8002b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a68:	4b92      	ldr	r3, [pc, #584]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d00c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a74:	4b8f      	ldr	r3, [pc, #572]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d112      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5e>
 8002a80:	4b8c      	ldr	r3, [pc, #560]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8e:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d06c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x12c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d168      	bne.n	8002b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e246      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x76>
 8002ab0:	4b80      	ldr	r3, [pc, #512]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a7f      	ldr	r2, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e02e      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x98>
 8002ac6:	4b7b      	ldr	r3, [pc, #492]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7a      	ldr	r2, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a77      	ldr	r2, [pc, #476]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0xbc>
 8002aea:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a71      	ldr	r2, [pc, #452]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002b04:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6a      	ldr	r2, [pc, #424]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fccc 	bl	80024c0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fcc8 	bl	80024c0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1fa      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe4>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fcb8 	bl	80024c0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fcb4 	bl	80024c0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1e6      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x10c>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b82:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x18c>
 8002b9a:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x176>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1ba      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x270>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7ff fc6d 	bl	80024c0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7ff fc69 	bl	80024c0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e19b      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4927      	ldr	r1, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_RCC_OscConfig+0x270>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff fc4c 	bl	80024c0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fc48 	bl	80024c0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e17a      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d03a      	beq.n	8002ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7ff fc2c 	bl	80024c0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff fc28 	bl	80024c0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e15a      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f000 fa9a 	bl	80031c4 <RCC_Delay>
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7ff fc12 	bl	80024c0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9e:	e00f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7ff fc0e 	bl	80024c0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e140      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	42420000 	.word	0x42420000
 8002cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b9e      	ldr	r3, [pc, #632]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e9      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a6 	beq.w	8002e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b97      	ldr	r3, [pc, #604]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4b94      	ldr	r3, [pc, #592]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a93      	ldr	r2, [pc, #588]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	61d3      	str	r3, [r2, #28]
 8002cf6:	4b91      	ldr	r3, [pc, #580]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b8e      	ldr	r3, [pc, #568]	; (8002f40 <HAL_RCC_OscConfig+0x4f8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d12:	4b8b      	ldr	r3, [pc, #556]	; (8002f40 <HAL_RCC_OscConfig+0x4f8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a8a      	ldr	r2, [pc, #552]	; (8002f40 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fbcf 	bl	80024c0 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff fbcb 	bl	80024c0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	; 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0fd      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x312>
 8002d4c:	4b7b      	ldr	r3, [pc, #492]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a7a      	ldr	r2, [pc, #488]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e02d      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x334>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a72      	ldr	r2, [pc, #456]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	e01c      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x356>
 8002d84:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a69      	ldr	r2, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d9e:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a63      	ldr	r2, [pc, #396]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d015      	beq.n	8002dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fb7f 	bl	80024c0 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7ff fb7b 	bl	80024c0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0ab      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ee      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x37e>
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7ff fb69 	bl	80024c0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff fb65 	bl	80024c0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e095      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	4b4c      	ldr	r3, [pc, #304]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ee      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a47      	ldr	r2, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8081 	beq.w	8002f32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d061      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d146      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_OscConfig+0x4fc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7ff fb39 	bl	80024c0 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e52:	f7ff fb35 	bl	80024c0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e067      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	492d      	ldr	r1, [pc, #180]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a19      	ldr	r1, [r3, #32]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	4927      	ldr	r1, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x4fc>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7ff fb09 	bl	80024c0 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7ff fb05 	bl	80024c0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e037      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x46a>
 8002ed0:	e02f      	b.n	8002f32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_RCC_OscConfig+0x4fc>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff faf2 	bl	80024c0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7ff faee 	bl	80024c0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e020      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x498>
 8002efe:	e018      	b.n	8002f32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e013      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
 8002f44:	42420060 	.word	0x42420060

08002f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0d0      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4965      	ldr	r1, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e073      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3d      	ldr	r3, [pc, #244]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4936      	ldr	r1, [pc, #216]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7ff fa42 	bl	80024c0 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7ff fa3e 	bl	80024c0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e053      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f9a0 	bl	800243c <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000
 800310c:	40021000 	.word	0x40021000
 8003110:	08003a28 	.word	0x08003a28
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x30>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x36>
 800314a:	e027      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	613b      	str	r3, [r7, #16]
      break;
 8003150:	e027      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c5b      	lsrs	r3, r3, #17
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	fb02 f203 	mul.w	r2, r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	613b      	str	r3, [r7, #16]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	693b      	ldr	r3, [r7, #16]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	08003a38 	.word	0x08003a38
 80031bc:	08003a48 	.word	0x08003a48
 80031c0:	003d0900 	.word	0x003d0900

080031c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCC_Delay+0x34>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <RCC_Delay+0x38>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e0:	bf00      	nop
  }
  while (Delay --);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <RCC_Delay+0x1c>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e041      	b.n	8003296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff f870 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fa56 	bl	80036f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e035      	b.n	8003324 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_TIM_Base_Start_IT+0x90>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x4e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d004      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x4e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_TIM_Base_Start_IT+0x94>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d010      	beq.n	8003322 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	e007      	b.n	8003322 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400

08003338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d020      	beq.n	800339c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0202 	mvn.w	r2, #2
 800336c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f998 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f98b 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f99a 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d020      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0204 	mvn.w	r2, #4
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f972 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f965 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f974 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f94c 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f93f 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f94e 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0210 	mvn.w	r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f926 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f919 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f928 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe feaa 	bl	80021f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa6f 	bl	80039a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8f8 	bl	80036dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa42 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 f96a 	bl	80038a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 f953 	bl	80038a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f8ca 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f921 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f8e8 	bl	8003814 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f911 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 f8aa 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f901 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f8f8 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
	...

080036f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <TIM_Base_SetConfig+0xc0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0x28>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0x28>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <TIM_Base_SetConfig+0xc4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <TIM_Base_SetConfig+0xc0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <TIM_Base_SetConfig+0x52>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0x52>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <TIM_Base_SetConfig+0xc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <TIM_Base_SetConfig+0xc0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d103      	bne.n	8003788 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]
  }
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400

080037b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 030a 	bic.w	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0210 	bic.w	r2, r3, #16
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 0307 	orr.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	021a      	lsls	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e041      	b.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d004      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10c      	bne.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <__libc_init_array>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	2600      	movs	r6, #0
 80039bc:	4d0c      	ldr	r5, [pc, #48]	; (80039f0 <__libc_init_array+0x38>)
 80039be:	4c0d      	ldr	r4, [pc, #52]	; (80039f4 <__libc_init_array+0x3c>)
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	42a6      	cmp	r6, r4
 80039c6:	d109      	bne.n	80039dc <__libc_init_array+0x24>
 80039c8:	f000 f822 	bl	8003a10 <_init>
 80039cc:	2600      	movs	r6, #0
 80039ce:	4d0a      	ldr	r5, [pc, #40]	; (80039f8 <__libc_init_array+0x40>)
 80039d0:	4c0a      	ldr	r4, [pc, #40]	; (80039fc <__libc_init_array+0x44>)
 80039d2:	1b64      	subs	r4, r4, r5
 80039d4:	10a4      	asrs	r4, r4, #2
 80039d6:	42a6      	cmp	r6, r4
 80039d8:	d105      	bne.n	80039e6 <__libc_init_array+0x2e>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e0:	4798      	blx	r3
 80039e2:	3601      	adds	r6, #1
 80039e4:	e7ee      	b.n	80039c4 <__libc_init_array+0xc>
 80039e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ea:	4798      	blx	r3
 80039ec:	3601      	adds	r6, #1
 80039ee:	e7f2      	b.n	80039d6 <__libc_init_array+0x1e>
 80039f0:	08003a4c 	.word	0x08003a4c
 80039f4:	08003a4c 	.word	0x08003a4c
 80039f8:	08003a4c 	.word	0x08003a4c
 80039fc:	08003a50 	.word	0x08003a50

08003a00 <memset>:
 8003a00:	4603      	mov	r3, r0
 8003a02:	4402      	add	r2, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
