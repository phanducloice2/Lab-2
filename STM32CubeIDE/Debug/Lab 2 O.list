
Lab 2 O.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003a70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003a70  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a46  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001798  00000000  00000000  00028a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016545  00000000  00000000  0002b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fbc  00000000  00000000  00041a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082398  00000000  00000000  0004b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdd89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000cdddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a20 	.word	0x08003a20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a20 	.word	0x08003a20

0800014c <updateLEDMatrix0>:
//int index_led=0;
const int MAX_LED_MATRIX=9;
int index_led_matrix=0;
uint8_t matrix_buffer[8];
int led_buffer[4]={1,5,0,8};
void updateLEDMatrix0(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800015a:	48c7      	ldr	r0, [pc, #796]	; (8000478 <updateLEDMatrix0+0x32c>)
 800015c:	f002 fc4a 	bl	80029f4 <HAL_GPIO_WritePin>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b07      	cmp	r3, #7
 8000164:	f200 81c1 	bhi.w	80004ea <updateLEDMatrix0+0x39e>
 8000168:	a201      	add	r2, pc, #4	; (adr r2, 8000170 <updateLEDMatrix0+0x24>)
 800016a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016e:	bf00      	nop
 8000170:	08000191 	.word	0x08000191
 8000174:	080001fb 	.word	0x080001fb
 8000178:	08000265 	.word	0x08000265
 800017c:	080002cf 	.word	0x080002cf
 8000180:	08000339 	.word	0x08000339
 8000184:	080003a3 	.word	0x080003a3
 8000188:	0800040d 	.word	0x0800040d
 800018c:	08000481 	.word	0x08000481
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	48b9      	ldr	r0, [pc, #740]	; (800047c <updateLEDMatrix0+0x330>)
 8000196:	f002 fc2d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2108      	movs	r1, #8
 800019e:	48b7      	ldr	r0, [pc, #732]	; (800047c <updateLEDMatrix0+0x330>)
 80001a0:	f002 fc28 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001aa:	48b4      	ldr	r0, [pc, #720]	; (800047c <updateLEDMatrix0+0x330>)
 80001ac:	f002 fc22 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b6:	48b1      	ldr	r0, [pc, #708]	; (800047c <updateLEDMatrix0+0x330>)
 80001b8:	f002 fc1c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	48ae      	ldr	r0, [pc, #696]	; (800047c <updateLEDMatrix0+0x330>)
 80001c4:	f002 fc16 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48ab      	ldr	r0, [pc, #684]	; (800047c <updateLEDMatrix0+0x330>)
 80001d0:	f002 fc10 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	48a8      	ldr	r0, [pc, #672]	; (800047c <updateLEDMatrix0+0x330>)
 80001dc:	f002 fc0a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e6:	48a5      	ldr	r0, [pc, #660]	; (800047c <updateLEDMatrix0+0x330>)
 80001e8:	f002 fc04 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	48a1      	ldr	r0, [pc, #644]	; (8000478 <updateLEDMatrix0+0x32c>)
 80001f4:	f002 fbfe 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80001f8:	e178      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2104      	movs	r1, #4
 80001fe:	489f      	ldr	r0, [pc, #636]	; (800047c <updateLEDMatrix0+0x330>)
 8000200:	f002 fbf8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2108      	movs	r1, #8
 8000208:	489c      	ldr	r0, [pc, #624]	; (800047c <updateLEDMatrix0+0x330>)
 800020a:	f002 fbf3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000214:	4899      	ldr	r0, [pc, #612]	; (800047c <updateLEDMatrix0+0x330>)
 8000216:	f002 fbed 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000220:	4896      	ldr	r0, [pc, #600]	; (800047c <updateLEDMatrix0+0x330>)
 8000222:	f002 fbe7 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4893      	ldr	r0, [pc, #588]	; (800047c <updateLEDMatrix0+0x330>)
 800022e:	f002 fbe1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	4890      	ldr	r0, [pc, #576]	; (800047c <updateLEDMatrix0+0x330>)
 800023a:	f002 fbdb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000244:	488d      	ldr	r0, [pc, #564]	; (800047c <updateLEDMatrix0+0x330>)
 8000246:	f002 fbd5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000250:	488a      	ldr	r0, [pc, #552]	; (800047c <updateLEDMatrix0+0x330>)
 8000252:	f002 fbcf 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025c:	4886      	ldr	r0, [pc, #536]	; (8000478 <updateLEDMatrix0+0x32c>)
 800025e:	f002 fbc9 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000262:	e143      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	4884      	ldr	r0, [pc, #528]	; (800047c <updateLEDMatrix0+0x330>)
 800026a:	f002 fbc3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2108      	movs	r1, #8
 8000272:	4882      	ldr	r0, [pc, #520]	; (800047c <updateLEDMatrix0+0x330>)
 8000274:	f002 fbbe 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	487f      	ldr	r0, [pc, #508]	; (800047c <updateLEDMatrix0+0x330>)
 8000280:	f002 fbb8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800028a:	487c      	ldr	r0, [pc, #496]	; (800047c <updateLEDMatrix0+0x330>)
 800028c:	f002 fbb2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000296:	4879      	ldr	r0, [pc, #484]	; (800047c <updateLEDMatrix0+0x330>)
 8000298:	f002 fbac 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	4876      	ldr	r0, [pc, #472]	; (800047c <updateLEDMatrix0+0x330>)
 80002a4:	f002 fba6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ae:	4873      	ldr	r0, [pc, #460]	; (800047c <updateLEDMatrix0+0x330>)
 80002b0:	f002 fba0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ba:	4870      	ldr	r0, [pc, #448]	; (800047c <updateLEDMatrix0+0x330>)
 80002bc:	f002 fb9a 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c6:	486c      	ldr	r0, [pc, #432]	; (8000478 <updateLEDMatrix0+0x32c>)
 80002c8:	f002 fb94 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80002cc:	e10e      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2104      	movs	r1, #4
 80002d2:	486a      	ldr	r0, [pc, #424]	; (800047c <updateLEDMatrix0+0x330>)
 80002d4:	f002 fb8e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2108      	movs	r1, #8
 80002dc:	4867      	ldr	r0, [pc, #412]	; (800047c <updateLEDMatrix0+0x330>)
 80002de:	f002 fb89 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e8:	4864      	ldr	r0, [pc, #400]	; (800047c <updateLEDMatrix0+0x330>)
 80002ea:	f002 fb83 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f4:	4861      	ldr	r0, [pc, #388]	; (800047c <updateLEDMatrix0+0x330>)
 80002f6:	f002 fb7d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000300:	485e      	ldr	r0, [pc, #376]	; (800047c <updateLEDMatrix0+0x330>)
 8000302:	f002 fb77 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030c:	485b      	ldr	r0, [pc, #364]	; (800047c <updateLEDMatrix0+0x330>)
 800030e:	f002 fb71 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000318:	4858      	ldr	r0, [pc, #352]	; (800047c <updateLEDMatrix0+0x330>)
 800031a:	f002 fb6b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	4855      	ldr	r0, [pc, #340]	; (800047c <updateLEDMatrix0+0x330>)
 8000326:	f002 fb65 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000330:	4851      	ldr	r0, [pc, #324]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000332:	f002 fb5f 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000336:	e0d9      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2104      	movs	r1, #4
 800033c:	484f      	ldr	r0, [pc, #316]	; (800047c <updateLEDMatrix0+0x330>)
 800033e:	f002 fb59 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2108      	movs	r1, #8
 8000346:	484d      	ldr	r0, [pc, #308]	; (800047c <updateLEDMatrix0+0x330>)
 8000348:	f002 fb54 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	484a      	ldr	r0, [pc, #296]	; (800047c <updateLEDMatrix0+0x330>)
 8000354:	f002 fb4e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035e:	4847      	ldr	r0, [pc, #284]	; (800047c <updateLEDMatrix0+0x330>)
 8000360:	f002 fb48 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <updateLEDMatrix0+0x330>)
 800036c:	f002 fb42 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4841      	ldr	r0, [pc, #260]	; (800047c <updateLEDMatrix0+0x330>)
 8000378:	f002 fb3c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000382:	483e      	ldr	r0, [pc, #248]	; (800047c <updateLEDMatrix0+0x330>)
 8000384:	f002 fb36 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800038e:	483b      	ldr	r0, [pc, #236]	; (800047c <updateLEDMatrix0+0x330>)
 8000390:	f002 fb30 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039a:	4837      	ldr	r0, [pc, #220]	; (8000478 <updateLEDMatrix0+0x32c>)
 800039c:	f002 fb2a 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80003a0:	e0a4      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2104      	movs	r1, #4
 80003a6:	4835      	ldr	r0, [pc, #212]	; (800047c <updateLEDMatrix0+0x330>)
 80003a8:	f002 fb24 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2108      	movs	r1, #8
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <updateLEDMatrix0+0x330>)
 80003b2:	f002 fb1f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	482f      	ldr	r0, [pc, #188]	; (800047c <updateLEDMatrix0+0x330>)
 80003be:	f002 fb19 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	482c      	ldr	r0, [pc, #176]	; (800047c <updateLEDMatrix0+0x330>)
 80003ca:	f002 fb13 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d4:	4829      	ldr	r0, [pc, #164]	; (800047c <updateLEDMatrix0+0x330>)
 80003d6:	f002 fb0d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <updateLEDMatrix0+0x330>)
 80003e2:	f002 fb07 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <updateLEDMatrix0+0x330>)
 80003ee:	f002 fb01 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f8:	4820      	ldr	r0, [pc, #128]	; (800047c <updateLEDMatrix0+0x330>)
 80003fa:	f002 fafb 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000404:	481c      	ldr	r0, [pc, #112]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000406:	f002 faf5 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800040a:	e06f      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2104      	movs	r1, #4
 8000410:	481a      	ldr	r0, [pc, #104]	; (800047c <updateLEDMatrix0+0x330>)
 8000412:	f002 faef 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	4818      	ldr	r0, [pc, #96]	; (800047c <updateLEDMatrix0+0x330>)
 800041c:	f002 faea 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000426:	4815      	ldr	r0, [pc, #84]	; (800047c <updateLEDMatrix0+0x330>)
 8000428:	f002 fae4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <updateLEDMatrix0+0x330>)
 8000434:	f002 fade 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <updateLEDMatrix0+0x330>)
 8000440:	f002 fad8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <updateLEDMatrix0+0x330>)
 800044c:	f002 fad2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <updateLEDMatrix0+0x330>)
 8000458:	f002 facc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <updateLEDMatrix0+0x330>)
 8000464:	f002 fac6 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <updateLEDMatrix0+0x32c>)
 8000470:	f002 fac0 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000474:	e03a      	b.n	80004ec <updateLEDMatrix0+0x3a0>
 8000476:	bf00      	nop
 8000478:	40010c00 	.word	0x40010c00
 800047c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2104      	movs	r1, #4
 8000484:	481b      	ldr	r0, [pc, #108]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 8000486:	f002 fab5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2108      	movs	r1, #8
 800048e:	4819      	ldr	r0, [pc, #100]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 8000490:	f002 fab0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	4816      	ldr	r0, [pc, #88]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 800049c:	f002 faaa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a6:	4813      	ldr	r0, [pc, #76]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004a8:	f002 faa4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	4810      	ldr	r0, [pc, #64]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004b4:	f002 fa9e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004c0:	f002 fa98 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004cc:	f002 fa92 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <updateLEDMatrix0+0x3a8>)
 80004d8:	f002 fa8c 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <updateLEDMatrix0+0x3ac>)
 80004e4:	f002 fa86 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 80004e8:	e000      	b.n	80004ec <updateLEDMatrix0+0x3a0>
	default:
		break;
 80004ea:	bf00      	nop
	}
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010800 	.word	0x40010800
 80004f8:	40010c00 	.word	0x40010c00

080004fc <updateLEDMatrix1>:

void updateLEDMatrix1(int index){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800050a:	48c7      	ldr	r0, [pc, #796]	; (8000828 <updateLEDMatrix1+0x32c>)
 800050c:	f002 fa72 	bl	80029f4 <HAL_GPIO_WritePin>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b07      	cmp	r3, #7
 8000514:	f200 81c1 	bhi.w	800089a <updateLEDMatrix1+0x39e>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <updateLEDMatrix1+0x24>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000541 	.word	0x08000541
 8000524:	080005ab 	.word	0x080005ab
 8000528:	08000615 	.word	0x08000615
 800052c:	0800067f 	.word	0x0800067f
 8000530:	080006e9 	.word	0x080006e9
 8000534:	08000753 	.word	0x08000753
 8000538:	080007bd 	.word	0x080007bd
 800053c:	08000831 	.word	0x08000831
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2104      	movs	r1, #4
 8000544:	48b9      	ldr	r0, [pc, #740]	; (800082c <updateLEDMatrix1+0x330>)
 8000546:	f002 fa55 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	48b7      	ldr	r0, [pc, #732]	; (800082c <updateLEDMatrix1+0x330>)
 8000550:	f002 fa50 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	48b4      	ldr	r0, [pc, #720]	; (800082c <updateLEDMatrix1+0x330>)
 800055c:	f002 fa4a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000566:	48b1      	ldr	r0, [pc, #708]	; (800082c <updateLEDMatrix1+0x330>)
 8000568:	f002 fa44 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	48ae      	ldr	r0, [pc, #696]	; (800082c <updateLEDMatrix1+0x330>)
 8000574:	f002 fa3e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	48ab      	ldr	r0, [pc, #684]	; (800082c <updateLEDMatrix1+0x330>)
 8000580:	f002 fa38 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058a:	48a8      	ldr	r0, [pc, #672]	; (800082c <updateLEDMatrix1+0x330>)
 800058c:	f002 fa32 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000596:	48a5      	ldr	r0, [pc, #660]	; (800082c <updateLEDMatrix1+0x330>)
 8000598:	f002 fa2c 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	48a1      	ldr	r0, [pc, #644]	; (8000828 <updateLEDMatrix1+0x32c>)
 80005a4:	f002 fa26 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80005a8:	e178      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2104      	movs	r1, #4
 80005ae:	489f      	ldr	r0, [pc, #636]	; (800082c <updateLEDMatrix1+0x330>)
 80005b0:	f002 fa20 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	489c      	ldr	r0, [pc, #624]	; (800082c <updateLEDMatrix1+0x330>)
 80005ba:	f002 fa1b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	4899      	ldr	r0, [pc, #612]	; (800082c <updateLEDMatrix1+0x330>)
 80005c6:	f002 fa15 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d0:	4896      	ldr	r0, [pc, #600]	; (800082c <updateLEDMatrix1+0x330>)
 80005d2:	f002 fa0f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005dc:	4893      	ldr	r0, [pc, #588]	; (800082c <updateLEDMatrix1+0x330>)
 80005de:	f002 fa09 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4890      	ldr	r0, [pc, #576]	; (800082c <updateLEDMatrix1+0x330>)
 80005ea:	f002 fa03 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	488d      	ldr	r0, [pc, #564]	; (800082c <updateLEDMatrix1+0x330>)
 80005f6:	f002 f9fd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	488a      	ldr	r0, [pc, #552]	; (800082c <updateLEDMatrix1+0x330>)
 8000602:	f002 f9f7 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4886      	ldr	r0, [pc, #536]	; (8000828 <updateLEDMatrix1+0x32c>)
 800060e:	f002 f9f1 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000612:	e143      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4884      	ldr	r0, [pc, #528]	; (800082c <updateLEDMatrix1+0x330>)
 800061a:	f002 f9eb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4882      	ldr	r0, [pc, #520]	; (800082c <updateLEDMatrix1+0x330>)
 8000624:	f002 f9e6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	487f      	ldr	r0, [pc, #508]	; (800082c <updateLEDMatrix1+0x330>)
 8000630:	f002 f9e0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	487c      	ldr	r0, [pc, #496]	; (800082c <updateLEDMatrix1+0x330>)
 800063c:	f002 f9da 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	4879      	ldr	r0, [pc, #484]	; (800082c <updateLEDMatrix1+0x330>)
 8000648:	f002 f9d4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4876      	ldr	r0, [pc, #472]	; (800082c <updateLEDMatrix1+0x330>)
 8000654:	f002 f9ce 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4873      	ldr	r0, [pc, #460]	; (800082c <updateLEDMatrix1+0x330>)
 8000660:	f002 f9c8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	4870      	ldr	r0, [pc, #448]	; (800082c <updateLEDMatrix1+0x330>)
 800066c:	f002 f9c2 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000676:	486c      	ldr	r0, [pc, #432]	; (8000828 <updateLEDMatrix1+0x32c>)
 8000678:	f002 f9bc 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800067c:	e10e      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2104      	movs	r1, #4
 8000682:	486a      	ldr	r0, [pc, #424]	; (800082c <updateLEDMatrix1+0x330>)
 8000684:	f002 f9b6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	4867      	ldr	r0, [pc, #412]	; (800082c <updateLEDMatrix1+0x330>)
 800068e:	f002 f9b1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4864      	ldr	r0, [pc, #400]	; (800082c <updateLEDMatrix1+0x330>)
 800069a:	f002 f9ab 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4861      	ldr	r0, [pc, #388]	; (800082c <updateLEDMatrix1+0x330>)
 80006a6:	f002 f9a5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b0:	485e      	ldr	r0, [pc, #376]	; (800082c <updateLEDMatrix1+0x330>)
 80006b2:	f002 f99f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	485b      	ldr	r0, [pc, #364]	; (800082c <updateLEDMatrix1+0x330>)
 80006be:	f002 f999 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c8:	4858      	ldr	r0, [pc, #352]	; (800082c <updateLEDMatrix1+0x330>)
 80006ca:	f002 f993 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d4:	4855      	ldr	r0, [pc, #340]	; (800082c <updateLEDMatrix1+0x330>)
 80006d6:	f002 f98d 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4851      	ldr	r0, [pc, #324]	; (8000828 <updateLEDMatrix1+0x32c>)
 80006e2:	f002 f987 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80006e6:	e0d9      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2104      	movs	r1, #4
 80006ec:	484f      	ldr	r0, [pc, #316]	; (800082c <updateLEDMatrix1+0x330>)
 80006ee:	f002 f981 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <updateLEDMatrix1+0x330>)
 80006f8:	f002 f97c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	484a      	ldr	r0, [pc, #296]	; (800082c <updateLEDMatrix1+0x330>)
 8000704:	f002 f976 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	4847      	ldr	r0, [pc, #284]	; (800082c <updateLEDMatrix1+0x330>)
 8000710:	f002 f970 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4844      	ldr	r0, [pc, #272]	; (800082c <updateLEDMatrix1+0x330>)
 800071c:	f002 f96a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	4841      	ldr	r0, [pc, #260]	; (800082c <updateLEDMatrix1+0x330>)
 8000728:	f002 f964 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <updateLEDMatrix1+0x330>)
 8000734:	f002 f95e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073e:	483b      	ldr	r0, [pc, #236]	; (800082c <updateLEDMatrix1+0x330>)
 8000740:	f002 f958 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4837      	ldr	r0, [pc, #220]	; (8000828 <updateLEDMatrix1+0x32c>)
 800074c:	f002 f952 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000750:	e0a4      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2104      	movs	r1, #4
 8000756:	4835      	ldr	r0, [pc, #212]	; (800082c <updateLEDMatrix1+0x330>)
 8000758:	f002 f94c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2108      	movs	r1, #8
 8000760:	4832      	ldr	r0, [pc, #200]	; (800082c <updateLEDMatrix1+0x330>)
 8000762:	f002 f947 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	482f      	ldr	r0, [pc, #188]	; (800082c <updateLEDMatrix1+0x330>)
 800076e:	f002 f941 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	482c      	ldr	r0, [pc, #176]	; (800082c <updateLEDMatrix1+0x330>)
 800077a:	f002 f93b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4829      	ldr	r0, [pc, #164]	; (800082c <updateLEDMatrix1+0x330>)
 8000786:	f002 f935 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4826      	ldr	r0, [pc, #152]	; (800082c <updateLEDMatrix1+0x330>)
 8000792:	f002 f92f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <updateLEDMatrix1+0x330>)
 800079e:	f002 f929 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <updateLEDMatrix1+0x330>)
 80007aa:	f002 f923 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	481c      	ldr	r0, [pc, #112]	; (8000828 <updateLEDMatrix1+0x32c>)
 80007b6:	f002 f91d 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80007ba:	e06f      	b.n	800089c <updateLEDMatrix1+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <updateLEDMatrix1+0x330>)
 80007c2:	f002 f917 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <updateLEDMatrix1+0x330>)
 80007cc:	f002 f912 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <updateLEDMatrix1+0x330>)
 80007d8:	f002 f90c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <updateLEDMatrix1+0x330>)
 80007e4:	f002 f906 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <updateLEDMatrix1+0x330>)
 80007f0:	f002 f900 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <updateLEDMatrix1+0x330>)
 80007fc:	f002 f8fa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <updateLEDMatrix1+0x330>)
 8000808:	f002 f8f4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <updateLEDMatrix1+0x330>)
 8000814:	f002 f8ee 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081e:	4802      	ldr	r0, [pc, #8]	; (8000828 <updateLEDMatrix1+0x32c>)
 8000820:	f002 f8e8 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000824:	e03a      	b.n	800089c <updateLEDMatrix1+0x3a0>
 8000826:	bf00      	nop
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	481b      	ldr	r0, [pc, #108]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000836:	f002 f8dd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2108      	movs	r1, #8
 800083e:	4819      	ldr	r0, [pc, #100]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000840:	f002 f8d8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 800084c:	f002 f8d2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000858:	f002 f8cc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000864:	f002 f8c6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000870:	f002 f8c0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 800087c:	f002 f8ba 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <updateLEDMatrix1+0x3a8>)
 8000888:	f002 f8b4 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <updateLEDMatrix1+0x3ac>)
 8000894:	f002 f8ae 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8000898:	e000      	b.n	800089c <updateLEDMatrix1+0x3a0>
	default:
		break;
 800089a:	bf00      	nop
	}
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40010c00 	.word	0x40010c00

080008ac <updateLEDMatrix2>:
void updateLEDMatrix2(int index){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ba:	48c7      	ldr	r0, [pc, #796]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 80008bc:	f002 f89a 	bl	80029f4 <HAL_GPIO_WritePin>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	f200 81c1 	bhi.w	8000c4a <updateLEDMatrix2+0x39e>
 80008c8:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <updateLEDMatrix2+0x24>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	080008f1 	.word	0x080008f1
 80008d4:	0800095b 	.word	0x0800095b
 80008d8:	080009c5 	.word	0x080009c5
 80008dc:	08000a2f 	.word	0x08000a2f
 80008e0:	08000a99 	.word	0x08000a99
 80008e4:	08000b03 	.word	0x08000b03
 80008e8:	08000b6d 	.word	0x08000b6d
 80008ec:	08000be1 	.word	0x08000be1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2104      	movs	r1, #4
 80008f4:	48b9      	ldr	r0, [pc, #740]	; (8000bdc <updateLEDMatrix2+0x330>)
 80008f6:	f002 f87d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	48b7      	ldr	r0, [pc, #732]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000900:	f002 f878 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090a:	48b4      	ldr	r0, [pc, #720]	; (8000bdc <updateLEDMatrix2+0x330>)
 800090c:	f002 f872 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000916:	48b1      	ldr	r0, [pc, #708]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000918:	f002 f86c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	48ae      	ldr	r0, [pc, #696]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000924:	f002 f866 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	48ab      	ldr	r0, [pc, #684]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000930:	f002 f860 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	48a8      	ldr	r0, [pc, #672]	; (8000bdc <updateLEDMatrix2+0x330>)
 800093c:	f002 f85a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000946:	48a5      	ldr	r0, [pc, #660]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000948:	f002 f854 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	48a1      	ldr	r0, [pc, #644]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000954:	f002 f84e 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000958:	e178      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	489f      	ldr	r0, [pc, #636]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000960:	f002 f848 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	489c      	ldr	r0, [pc, #624]	; (8000bdc <updateLEDMatrix2+0x330>)
 800096a:	f002 f843 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	4899      	ldr	r0, [pc, #612]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000976:	f002 f83d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	4896      	ldr	r0, [pc, #600]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000982:	f002 f837 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	4893      	ldr	r0, [pc, #588]	; (8000bdc <updateLEDMatrix2+0x330>)
 800098e:	f002 f831 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4890      	ldr	r0, [pc, #576]	; (8000bdc <updateLEDMatrix2+0x330>)
 800099a:	f002 f82b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	488d      	ldr	r0, [pc, #564]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009a6:	f002 f825 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	488a      	ldr	r0, [pc, #552]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009b2:	f002 f81f 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4886      	ldr	r0, [pc, #536]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 80009be:	f002 f819 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80009c2:	e143      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4884      	ldr	r0, [pc, #528]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009ca:	f002 f813 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	4882      	ldr	r0, [pc, #520]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009d4:	f002 f80e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009de:	487f      	ldr	r0, [pc, #508]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009e0:	f002 f808 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ea:	487c      	ldr	r0, [pc, #496]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009ec:	f002 f802 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f6:	4879      	ldr	r0, [pc, #484]	; (8000bdc <updateLEDMatrix2+0x330>)
 80009f8:	f001 fffc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4876      	ldr	r0, [pc, #472]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a04:	f001 fff6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4873      	ldr	r0, [pc, #460]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a10:	f001 fff0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4870      	ldr	r0, [pc, #448]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a1c:	f001 ffea 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a26:	486c      	ldr	r0, [pc, #432]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000a28:	f001 ffe4 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000a2c:	e10e      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	486a      	ldr	r0, [pc, #424]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a34:	f001 ffde 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4867      	ldr	r0, [pc, #412]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a3e:	f001 ffd9 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4864      	ldr	r0, [pc, #400]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a4a:	f001 ffd3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4861      	ldr	r0, [pc, #388]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a56:	f001 ffcd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	485e      	ldr	r0, [pc, #376]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a62:	f001 ffc7 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	485b      	ldr	r0, [pc, #364]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a6e:	f001 ffc1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4858      	ldr	r0, [pc, #352]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a7a:	f001 ffbb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a84:	4855      	ldr	r0, [pc, #340]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a86:	f001 ffb5 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	4851      	ldr	r0, [pc, #324]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000a92:	f001 ffaf 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000a96:	e0d9      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	484f      	ldr	r0, [pc, #316]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000a9e:	f001 ffa9 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	484d      	ldr	r0, [pc, #308]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000aa8:	f001 ffa4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	484a      	ldr	r0, [pc, #296]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ab4:	f001 ff9e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4847      	ldr	r0, [pc, #284]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ac0:	f001 ff98 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4844      	ldr	r0, [pc, #272]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000acc:	f001 ff92 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	4841      	ldr	r0, [pc, #260]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ad8:	f001 ff8c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	483e      	ldr	r0, [pc, #248]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ae4:	f001 ff86 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aee:	483b      	ldr	r0, [pc, #236]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000af0:	f001 ff80 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000afc:	f001 ff7a 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000b00:	e0a4      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2104      	movs	r1, #4
 8000b06:	4835      	ldr	r0, [pc, #212]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b08:	f001 ff74 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4832      	ldr	r0, [pc, #200]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b12:	f001 ff6f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	482f      	ldr	r0, [pc, #188]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b1e:	f001 ff69 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b28:	482c      	ldr	r0, [pc, #176]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b2a:	f001 ff63 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4829      	ldr	r0, [pc, #164]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b36:	f001 ff5d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b42:	f001 ff57 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b4e:	f001 ff51 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b5a:	f001 ff4b 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000b66:	f001 ff45 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000b6a:	e06f      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2104      	movs	r1, #4
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b72:	f001 ff3f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b7c:	f001 ff3a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b88:	f001 ff34 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000b94:	f001 ff2e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000ba0:	f001 ff28 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bac:	f001 ff22 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bb8:	f001 ff1c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <updateLEDMatrix2+0x330>)
 8000bc4:	f001 ff16 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <updateLEDMatrix2+0x32c>)
 8000bd0:	f001 ff10 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000bd4:	e03a      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
 8000bd6:	bf00      	nop
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2104      	movs	r1, #4
 8000be4:	481b      	ldr	r0, [pc, #108]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000be6:	f001 ff05 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2108      	movs	r1, #8
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000bf0:	f001 ff00 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000bfc:	f001 fefa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c08:	f001 fef4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c14:	f001 feee 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c20:	f001 fee8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c2c:	f001 fee2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <updateLEDMatrix2+0x3a8>)
 8000c38:	f001 fedc 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <updateLEDMatrix2+0x3ac>)
 8000c44:	f001 fed6 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8000c48:	e000      	b.n	8000c4c <updateLEDMatrix2+0x3a0>
	default:
		break;
 8000c4a:	bf00      	nop
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <updateLEDMatrix3>:
void updateLEDMatrix3(int index){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c6a:	48c7      	ldr	r0, [pc, #796]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000c6c:	f001 fec2 	bl	80029f4 <HAL_GPIO_WritePin>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	f200 81c1 	bhi.w	8000ffa <updateLEDMatrix3+0x39e>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <updateLEDMatrix3+0x24>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000d0b 	.word	0x08000d0b
 8000c88:	08000d75 	.word	0x08000d75
 8000c8c:	08000ddf 	.word	0x08000ddf
 8000c90:	08000e49 	.word	0x08000e49
 8000c94:	08000eb3 	.word	0x08000eb3
 8000c98:	08000f1d 	.word	0x08000f1d
 8000c9c:	08000f91 	.word	0x08000f91
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	48b9      	ldr	r0, [pc, #740]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ca6:	f001 fea5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	48b7      	ldr	r0, [pc, #732]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cb0:	f001 fea0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	48b4      	ldr	r0, [pc, #720]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cbc:	f001 fe9a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc6:	48b1      	ldr	r0, [pc, #708]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cc8:	f001 fe94 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	48ae      	ldr	r0, [pc, #696]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cd4:	f001 fe8e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	48ab      	ldr	r0, [pc, #684]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ce0:	f001 fe88 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cea:	48a8      	ldr	r0, [pc, #672]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cec:	f001 fe82 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf6:	48a5      	ldr	r0, [pc, #660]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000cf8:	f001 fe7c 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	48a1      	ldr	r0, [pc, #644]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000d04:	f001 fe76 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000d08:	e178      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	489f      	ldr	r0, [pc, #636]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d10:	f001 fe70 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2108      	movs	r1, #8
 8000d18:	489c      	ldr	r0, [pc, #624]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d1a:	f001 fe6b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d24:	4899      	ldr	r0, [pc, #612]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d26:	f001 fe65 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d30:	4896      	ldr	r0, [pc, #600]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d32:	f001 fe5f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	4893      	ldr	r0, [pc, #588]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d3e:	f001 fe59 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4890      	ldr	r0, [pc, #576]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d4a:	f001 fe53 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d54:	488d      	ldr	r0, [pc, #564]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d56:	f001 fe4d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	488a      	ldr	r0, [pc, #552]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d62:	f001 fe47 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	4886      	ldr	r0, [pc, #536]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000d6e:	f001 fe41 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000d72:	e143      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	4884      	ldr	r0, [pc, #528]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d7a:	f001 fe3b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	4882      	ldr	r0, [pc, #520]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d84:	f001 fe36 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8e:	487f      	ldr	r0, [pc, #508]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d90:	f001 fe30 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9a:	487c      	ldr	r0, [pc, #496]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000d9c:	f001 fe2a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da6:	4879      	ldr	r0, [pc, #484]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000da8:	f001 fe24 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000db4:	f001 fe1e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	4873      	ldr	r0, [pc, #460]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dc0:	f001 fe18 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	4870      	ldr	r0, [pc, #448]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dcc:	f001 fe12 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	486c      	ldr	r0, [pc, #432]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000dd8:	f001 fe0c 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000ddc:	e10e      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2104      	movs	r1, #4
 8000de2:	486a      	ldr	r0, [pc, #424]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000de4:	f001 fe06 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2108      	movs	r1, #8
 8000dec:	4867      	ldr	r0, [pc, #412]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dee:	f001 fe01 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df8:	4864      	ldr	r0, [pc, #400]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000dfa:	f001 fdfb 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	4861      	ldr	r0, [pc, #388]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e06:	f001 fdf5 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e10:	485e      	ldr	r0, [pc, #376]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e12:	f001 fdef 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1c:	485b      	ldr	r0, [pc, #364]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e1e:	f001 fde9 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e28:	4858      	ldr	r0, [pc, #352]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e2a:	f001 fde3 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e34:	4855      	ldr	r0, [pc, #340]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e36:	f001 fddd 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e40:	4851      	ldr	r0, [pc, #324]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000e42:	f001 fdd7 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000e46:	e0d9      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	484f      	ldr	r0, [pc, #316]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e4e:	f001 fdd1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2108      	movs	r1, #8
 8000e56:	484d      	ldr	r0, [pc, #308]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e58:	f001 fdcc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	484a      	ldr	r0, [pc, #296]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e64:	f001 fdc6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6e:	4847      	ldr	r0, [pc, #284]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e70:	f001 fdc0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7a:	4844      	ldr	r0, [pc, #272]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e7c:	f001 fdba 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	4841      	ldr	r0, [pc, #260]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e88:	f001 fdb4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	483e      	ldr	r0, [pc, #248]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000e94:	f001 fdae 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	483b      	ldr	r0, [pc, #236]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ea0:	f001 fda8 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eaa:	4837      	ldr	r0, [pc, #220]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000eac:	f001 fda2 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000eb0:	e0a4      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000eb8:	f001 fd9c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4832      	ldr	r0, [pc, #200]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ec2:	f001 fd97 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	482f      	ldr	r0, [pc, #188]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ece:	f001 fd91 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	482c      	ldr	r0, [pc, #176]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000eda:	f001 fd8b 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ee6:	f001 fd85 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	4826      	ldr	r0, [pc, #152]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000ef2:	f001 fd7f 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000efe:	f001 fd79 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	4820      	ldr	r0, [pc, #128]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f0a:	f001 fd73 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000f16:	f001 fd6d 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000f1a:	e06f      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2104      	movs	r1, #4
 8000f20:	481a      	ldr	r0, [pc, #104]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f22:	f001 fd67 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f2c:	f001 fd62 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f38:	f001 fd5c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f44:	f001 fd56 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f50:	f001 fd50 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f5c:	f001 fd4a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f68:	f001 fd44 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <updateLEDMatrix3+0x330>)
 8000f74:	f001 fd3e 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <updateLEDMatrix3+0x32c>)
 8000f80:	f001 fd38 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8000f84:	e03a      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
 8000f86:	bf00      	nop
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2104      	movs	r1, #4
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000f96:	f001 fd2d 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fa0:	f001 fd28 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fac:	f001 fd22 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fb8:	f001 fd1c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fc4:	f001 fd16 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fd0:	f001 fd10 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fdc:	f001 fd0a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <updateLEDMatrix3+0x3a8>)
 8000fe8:	f001 fd04 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <updateLEDMatrix3+0x3ac>)
 8000ff4:	f001 fcfe 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8000ff8:	e000      	b.n	8000ffc <updateLEDMatrix3+0x3a0>
	default:
		break;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <updateLEDMatrix4>:
void updateLEDMatrix4(int index){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800101a:	48c7      	ldr	r0, [pc, #796]	; (8001338 <updateLEDMatrix4+0x32c>)
 800101c:	f001 fcea 	bl	80029f4 <HAL_GPIO_WritePin>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b07      	cmp	r3, #7
 8001024:	f200 81c1 	bhi.w	80013aa <updateLEDMatrix4+0x39e>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <updateLEDMatrix4+0x24>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001051 	.word	0x08001051
 8001034:	080010bb 	.word	0x080010bb
 8001038:	08001125 	.word	0x08001125
 800103c:	0800118f 	.word	0x0800118f
 8001040:	080011f9 	.word	0x080011f9
 8001044:	08001263 	.word	0x08001263
 8001048:	080012cd 	.word	0x080012cd
 800104c:	08001341 	.word	0x08001341
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2104      	movs	r1, #4
 8001054:	48b9      	ldr	r0, [pc, #740]	; (800133c <updateLEDMatrix4+0x330>)
 8001056:	f001 fccd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	48b7      	ldr	r0, [pc, #732]	; (800133c <updateLEDMatrix4+0x330>)
 8001060:	f001 fcc8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	48b4      	ldr	r0, [pc, #720]	; (800133c <updateLEDMatrix4+0x330>)
 800106c:	f001 fcc2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001076:	48b1      	ldr	r0, [pc, #708]	; (800133c <updateLEDMatrix4+0x330>)
 8001078:	f001 fcbc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	48ae      	ldr	r0, [pc, #696]	; (800133c <updateLEDMatrix4+0x330>)
 8001084:	f001 fcb6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	48ab      	ldr	r0, [pc, #684]	; (800133c <updateLEDMatrix4+0x330>)
 8001090:	f001 fcb0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	48a8      	ldr	r0, [pc, #672]	; (800133c <updateLEDMatrix4+0x330>)
 800109c:	f001 fcaa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	48a5      	ldr	r0, [pc, #660]	; (800133c <updateLEDMatrix4+0x330>)
 80010a8:	f001 fca4 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b2:	48a1      	ldr	r0, [pc, #644]	; (8001338 <updateLEDMatrix4+0x32c>)
 80010b4:	f001 fc9e 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80010b8:	e178      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2104      	movs	r1, #4
 80010be:	489f      	ldr	r0, [pc, #636]	; (800133c <updateLEDMatrix4+0x330>)
 80010c0:	f001 fc98 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2108      	movs	r1, #8
 80010c8:	489c      	ldr	r0, [pc, #624]	; (800133c <updateLEDMatrix4+0x330>)
 80010ca:	f001 fc93 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4899      	ldr	r0, [pc, #612]	; (800133c <updateLEDMatrix4+0x330>)
 80010d6:	f001 fc8d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e0:	4896      	ldr	r0, [pc, #600]	; (800133c <updateLEDMatrix4+0x330>)
 80010e2:	f001 fc87 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	4893      	ldr	r0, [pc, #588]	; (800133c <updateLEDMatrix4+0x330>)
 80010ee:	f001 fc81 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	4890      	ldr	r0, [pc, #576]	; (800133c <updateLEDMatrix4+0x330>)
 80010fa:	f001 fc7b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001104:	488d      	ldr	r0, [pc, #564]	; (800133c <updateLEDMatrix4+0x330>)
 8001106:	f001 fc75 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001110:	488a      	ldr	r0, [pc, #552]	; (800133c <updateLEDMatrix4+0x330>)
 8001112:	f001 fc6f 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	4886      	ldr	r0, [pc, #536]	; (8001338 <updateLEDMatrix4+0x32c>)
 800111e:	f001 fc69 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001122:	e143      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	4884      	ldr	r0, [pc, #528]	; (800133c <updateLEDMatrix4+0x330>)
 800112a:	f001 fc63 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	4882      	ldr	r0, [pc, #520]	; (800133c <updateLEDMatrix4+0x330>)
 8001134:	f001 fc5e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	487f      	ldr	r0, [pc, #508]	; (800133c <updateLEDMatrix4+0x330>)
 8001140:	f001 fc58 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	487c      	ldr	r0, [pc, #496]	; (800133c <updateLEDMatrix4+0x330>)
 800114c:	f001 fc52 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4879      	ldr	r0, [pc, #484]	; (800133c <updateLEDMatrix4+0x330>)
 8001158:	f001 fc4c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	4876      	ldr	r0, [pc, #472]	; (800133c <updateLEDMatrix4+0x330>)
 8001164:	f001 fc46 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	4873      	ldr	r0, [pc, #460]	; (800133c <updateLEDMatrix4+0x330>)
 8001170:	f001 fc40 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117a:	4870      	ldr	r0, [pc, #448]	; (800133c <updateLEDMatrix4+0x330>)
 800117c:	f001 fc3a 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001186:	486c      	ldr	r0, [pc, #432]	; (8001338 <updateLEDMatrix4+0x32c>)
 8001188:	f001 fc34 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800118c:	e10e      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2104      	movs	r1, #4
 8001192:	486a      	ldr	r0, [pc, #424]	; (800133c <updateLEDMatrix4+0x330>)
 8001194:	f001 fc2e 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2108      	movs	r1, #8
 800119c:	4867      	ldr	r0, [pc, #412]	; (800133c <updateLEDMatrix4+0x330>)
 800119e:	f001 fc29 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4864      	ldr	r0, [pc, #400]	; (800133c <updateLEDMatrix4+0x330>)
 80011aa:	f001 fc23 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4861      	ldr	r0, [pc, #388]	; (800133c <updateLEDMatrix4+0x330>)
 80011b6:	f001 fc1d 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	485e      	ldr	r0, [pc, #376]	; (800133c <updateLEDMatrix4+0x330>)
 80011c2:	f001 fc17 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	485b      	ldr	r0, [pc, #364]	; (800133c <updateLEDMatrix4+0x330>)
 80011ce:	f001 fc11 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d8:	4858      	ldr	r0, [pc, #352]	; (800133c <updateLEDMatrix4+0x330>)
 80011da:	f001 fc0b 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e4:	4855      	ldr	r0, [pc, #340]	; (800133c <updateLEDMatrix4+0x330>)
 80011e6:	f001 fc05 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4851      	ldr	r0, [pc, #324]	; (8001338 <updateLEDMatrix4+0x32c>)
 80011f2:	f001 fbff 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80011f6:	e0d9      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	484f      	ldr	r0, [pc, #316]	; (800133c <updateLEDMatrix4+0x330>)
 80011fe:	f001 fbf9 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	484d      	ldr	r0, [pc, #308]	; (800133c <updateLEDMatrix4+0x330>)
 8001208:	f001 fbf4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	484a      	ldr	r0, [pc, #296]	; (800133c <updateLEDMatrix4+0x330>)
 8001214:	f001 fbee 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121e:	4847      	ldr	r0, [pc, #284]	; (800133c <updateLEDMatrix4+0x330>)
 8001220:	f001 fbe8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	4844      	ldr	r0, [pc, #272]	; (800133c <updateLEDMatrix4+0x330>)
 800122c:	f001 fbe2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4841      	ldr	r0, [pc, #260]	; (800133c <updateLEDMatrix4+0x330>)
 8001238:	f001 fbdc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001242:	483e      	ldr	r0, [pc, #248]	; (800133c <updateLEDMatrix4+0x330>)
 8001244:	f001 fbd6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	483b      	ldr	r0, [pc, #236]	; (800133c <updateLEDMatrix4+0x330>)
 8001250:	f001 fbd0 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4837      	ldr	r0, [pc, #220]	; (8001338 <updateLEDMatrix4+0x32c>)
 800125c:	f001 fbca 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001260:	e0a4      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2104      	movs	r1, #4
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <updateLEDMatrix4+0x330>)
 8001268:	f001 fbc4 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2108      	movs	r1, #8
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <updateLEDMatrix4+0x330>)
 8001272:	f001 fbbf 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127c:	482f      	ldr	r0, [pc, #188]	; (800133c <updateLEDMatrix4+0x330>)
 800127e:	f001 fbb9 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	482c      	ldr	r0, [pc, #176]	; (800133c <updateLEDMatrix4+0x330>)
 800128a:	f001 fbb3 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	4829      	ldr	r0, [pc, #164]	; (800133c <updateLEDMatrix4+0x330>)
 8001296:	f001 fbad 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <updateLEDMatrix4+0x330>)
 80012a2:	f001 fba7 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <updateLEDMatrix4+0x330>)
 80012ae:	f001 fba1 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b8:	4820      	ldr	r0, [pc, #128]	; (800133c <updateLEDMatrix4+0x330>)
 80012ba:	f001 fb9b 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	481c      	ldr	r0, [pc, #112]	; (8001338 <updateLEDMatrix4+0x32c>)
 80012c6:	f001 fb95 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80012ca:	e06f      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2104      	movs	r1, #4
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <updateLEDMatrix4+0x330>)
 80012d2:	f001 fb8f 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2108      	movs	r1, #8
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <updateLEDMatrix4+0x330>)
 80012dc:	f001 fb8a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	4815      	ldr	r0, [pc, #84]	; (800133c <updateLEDMatrix4+0x330>)
 80012e8:	f001 fb84 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f2:	4812      	ldr	r0, [pc, #72]	; (800133c <updateLEDMatrix4+0x330>)
 80012f4:	f001 fb7e 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <updateLEDMatrix4+0x330>)
 8001300:	f001 fb78 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <updateLEDMatrix4+0x330>)
 800130c:	f001 fb72 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <updateLEDMatrix4+0x330>)
 8001318:	f001 fb6c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <updateLEDMatrix4+0x330>)
 8001324:	f001 fb66 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <updateLEDMatrix4+0x32c>)
 8001330:	f001 fb60 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001334:	e03a      	b.n	80013ac <updateLEDMatrix4+0x3a0>
 8001336:	bf00      	nop
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001346:	f001 fb55 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2108      	movs	r1, #8
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001350:	f001 fb50 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 800135c:	f001 fb4a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001368:	f001 fb44 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001374:	f001 fb3e 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001380:	f001 fb38 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	480a      	ldr	r0, [pc, #40]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 800138c:	f001 fb32 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <updateLEDMatrix4+0x3a8>)
 8001398:	f001 fb2c 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <updateLEDMatrix4+0x3ac>)
 80013a4:	f001 fb26 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 80013a8:	e000      	b.n	80013ac <updateLEDMatrix4+0x3a0>
	default:
		break;
 80013aa:	bf00      	nop
	}
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00

080013bc <updateLEDMatrix5>:
void updateLEDMatrix5(int index){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013ca:	48c7      	ldr	r0, [pc, #796]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80013cc:	f001 fb12 	bl	80029f4 <HAL_GPIO_WritePin>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	f200 81c1 	bhi.w	800175a <updateLEDMatrix5+0x39e>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <updateLEDMatrix5+0x24>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001401 	.word	0x08001401
 80013e4:	0800146b 	.word	0x0800146b
 80013e8:	080014d5 	.word	0x080014d5
 80013ec:	0800153f 	.word	0x0800153f
 80013f0:	080015a9 	.word	0x080015a9
 80013f4:	08001613 	.word	0x08001613
 80013f8:	0800167d 	.word	0x0800167d
 80013fc:	080016f1 	.word	0x080016f1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	48b9      	ldr	r0, [pc, #740]	; (80016ec <updateLEDMatrix5+0x330>)
 8001406:	f001 faf5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2108      	movs	r1, #8
 800140e:	48b7      	ldr	r0, [pc, #732]	; (80016ec <updateLEDMatrix5+0x330>)
 8001410:	f001 faf0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	48b4      	ldr	r0, [pc, #720]	; (80016ec <updateLEDMatrix5+0x330>)
 800141c:	f001 faea 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001426:	48b1      	ldr	r0, [pc, #708]	; (80016ec <updateLEDMatrix5+0x330>)
 8001428:	f001 fae4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	48ae      	ldr	r0, [pc, #696]	; (80016ec <updateLEDMatrix5+0x330>)
 8001434:	f001 fade 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	48ab      	ldr	r0, [pc, #684]	; (80016ec <updateLEDMatrix5+0x330>)
 8001440:	f001 fad8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144a:	48a8      	ldr	r0, [pc, #672]	; (80016ec <updateLEDMatrix5+0x330>)
 800144c:	f001 fad2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	48a5      	ldr	r0, [pc, #660]	; (80016ec <updateLEDMatrix5+0x330>)
 8001458:	f001 facc 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001462:	48a1      	ldr	r0, [pc, #644]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001464:	f001 fac6 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001468:	e178      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	489f      	ldr	r0, [pc, #636]	; (80016ec <updateLEDMatrix5+0x330>)
 8001470:	f001 fac0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2108      	movs	r1, #8
 8001478:	489c      	ldr	r0, [pc, #624]	; (80016ec <updateLEDMatrix5+0x330>)
 800147a:	f001 fabb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	4899      	ldr	r0, [pc, #612]	; (80016ec <updateLEDMatrix5+0x330>)
 8001486:	f001 fab5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4896      	ldr	r0, [pc, #600]	; (80016ec <updateLEDMatrix5+0x330>)
 8001492:	f001 faaf 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4893      	ldr	r0, [pc, #588]	; (80016ec <updateLEDMatrix5+0x330>)
 800149e:	f001 faa9 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a8:	4890      	ldr	r0, [pc, #576]	; (80016ec <updateLEDMatrix5+0x330>)
 80014aa:	f001 faa3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b4:	488d      	ldr	r0, [pc, #564]	; (80016ec <updateLEDMatrix5+0x330>)
 80014b6:	f001 fa9d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c0:	488a      	ldr	r0, [pc, #552]	; (80016ec <updateLEDMatrix5+0x330>)
 80014c2:	f001 fa97 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	4886      	ldr	r0, [pc, #536]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80014ce:	f001 fa91 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80014d2:	e143      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	4884      	ldr	r0, [pc, #528]	; (80016ec <updateLEDMatrix5+0x330>)
 80014da:	f001 fa8b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2108      	movs	r1, #8
 80014e2:	4882      	ldr	r0, [pc, #520]	; (80016ec <updateLEDMatrix5+0x330>)
 80014e4:	f001 fa86 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ee:	487f      	ldr	r0, [pc, #508]	; (80016ec <updateLEDMatrix5+0x330>)
 80014f0:	f001 fa80 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fa:	487c      	ldr	r0, [pc, #496]	; (80016ec <updateLEDMatrix5+0x330>)
 80014fc:	f001 fa7a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001506:	4879      	ldr	r0, [pc, #484]	; (80016ec <updateLEDMatrix5+0x330>)
 8001508:	f001 fa74 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	4876      	ldr	r0, [pc, #472]	; (80016ec <updateLEDMatrix5+0x330>)
 8001514:	f001 fa6e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4873      	ldr	r0, [pc, #460]	; (80016ec <updateLEDMatrix5+0x330>)
 8001520:	f001 fa68 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152a:	4870      	ldr	r0, [pc, #448]	; (80016ec <updateLEDMatrix5+0x330>)
 800152c:	f001 fa62 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	486c      	ldr	r0, [pc, #432]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001538:	f001 fa5c 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800153c:	e10e      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 3:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2104      	movs	r1, #4
 8001542:	486a      	ldr	r0, [pc, #424]	; (80016ec <updateLEDMatrix5+0x330>)
 8001544:	f001 fa56 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2108      	movs	r1, #8
 800154c:	4867      	ldr	r0, [pc, #412]	; (80016ec <updateLEDMatrix5+0x330>)
 800154e:	f001 fa51 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4864      	ldr	r0, [pc, #400]	; (80016ec <updateLEDMatrix5+0x330>)
 800155a:	f001 fa4b 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	4861      	ldr	r0, [pc, #388]	; (80016ec <updateLEDMatrix5+0x330>)
 8001566:	f001 fa45 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	485e      	ldr	r0, [pc, #376]	; (80016ec <updateLEDMatrix5+0x330>)
 8001572:	f001 fa3f 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	485b      	ldr	r0, [pc, #364]	; (80016ec <updateLEDMatrix5+0x330>)
 800157e:	f001 fa39 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4858      	ldr	r0, [pc, #352]	; (80016ec <updateLEDMatrix5+0x330>)
 800158a:	f001 fa33 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001594:	4855      	ldr	r0, [pc, #340]	; (80016ec <updateLEDMatrix5+0x330>)
 8001596:	f001 fa2d 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4851      	ldr	r0, [pc, #324]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80015a2:	f001 fa27 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80015a6:	e0d9      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	484f      	ldr	r0, [pc, #316]	; (80016ec <updateLEDMatrix5+0x330>)
 80015ae:	f001 fa21 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2108      	movs	r1, #8
 80015b6:	484d      	ldr	r0, [pc, #308]	; (80016ec <updateLEDMatrix5+0x330>)
 80015b8:	f001 fa1c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	484a      	ldr	r0, [pc, #296]	; (80016ec <updateLEDMatrix5+0x330>)
 80015c4:	f001 fa16 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ce:	4847      	ldr	r0, [pc, #284]	; (80016ec <updateLEDMatrix5+0x330>)
 80015d0:	f001 fa10 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	4844      	ldr	r0, [pc, #272]	; (80016ec <updateLEDMatrix5+0x330>)
 80015dc:	f001 fa0a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e6:	4841      	ldr	r0, [pc, #260]	; (80016ec <updateLEDMatrix5+0x330>)
 80015e8:	f001 fa04 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	483e      	ldr	r0, [pc, #248]	; (80016ec <updateLEDMatrix5+0x330>)
 80015f4:	f001 f9fe 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fe:	483b      	ldr	r0, [pc, #236]	; (80016ec <updateLEDMatrix5+0x330>)
 8001600:	f001 f9f8 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	4837      	ldr	r0, [pc, #220]	; (80016e8 <updateLEDMatrix5+0x32c>)
 800160c:	f001 f9f2 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001610:	e0a4      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 5:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2104      	movs	r1, #4
 8001616:	4835      	ldr	r0, [pc, #212]	; (80016ec <updateLEDMatrix5+0x330>)
 8001618:	f001 f9ec 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	4832      	ldr	r0, [pc, #200]	; (80016ec <updateLEDMatrix5+0x330>)
 8001622:	f001 f9e7 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <updateLEDMatrix5+0x330>)
 800162e:	f001 f9e1 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	482c      	ldr	r0, [pc, #176]	; (80016ec <updateLEDMatrix5+0x330>)
 800163a:	f001 f9db 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <updateLEDMatrix5+0x330>)
 8001646:	f001 f9d5 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001650:	4826      	ldr	r0, [pc, #152]	; (80016ec <updateLEDMatrix5+0x330>)
 8001652:	f001 f9cf 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <updateLEDMatrix5+0x330>)
 800165e:	f001 f9c9 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001668:	4820      	ldr	r0, [pc, #128]	; (80016ec <updateLEDMatrix5+0x330>)
 800166a:	f001 f9c3 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001674:	481c      	ldr	r0, [pc, #112]	; (80016e8 <updateLEDMatrix5+0x32c>)
 8001676:	f001 f9bd 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 800167a:	e06f      	b.n	800175c <updateLEDMatrix5+0x3a0>
	case 6:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2104      	movs	r1, #4
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <updateLEDMatrix5+0x330>)
 8001682:	f001 f9b7 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2108      	movs	r1, #8
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <updateLEDMatrix5+0x330>)
 800168c:	f001 f9b2 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <updateLEDMatrix5+0x330>)
 8001698:	f001 f9ac 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <updateLEDMatrix5+0x330>)
 80016a4:	f001 f9a6 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <updateLEDMatrix5+0x330>)
 80016b0:	f001 f9a0 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <updateLEDMatrix5+0x330>)
 80016bc:	f001 f99a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <updateLEDMatrix5+0x330>)
 80016c8:	f001 f994 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <updateLEDMatrix5+0x330>)
 80016d4:	f001 f98e 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016de:	4802      	ldr	r0, [pc, #8]	; (80016e8 <updateLEDMatrix5+0x32c>)
 80016e0:	f001 f988 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80016e4:	e03a      	b.n	800175c <updateLEDMatrix5+0x3a0>
 80016e6:	bf00      	nop
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40010800 	.word	0x40010800
	case 7:
		//COL
				HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2104      	movs	r1, #4
 80016f4:	481b      	ldr	r0, [pc, #108]	; (8001764 <updateLEDMatrix5+0x3a8>)
 80016f6:	f001 f97d 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2108      	movs	r1, #8
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001700:	f001 f978 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <updateLEDMatrix5+0x3a8>)
 800170c:	f001 f972 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001718:	f001 f96c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001724:	f001 f966 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001730:	f001 f960 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <updateLEDMatrix5+0x3a8>)
 800173c:	f001 f95a 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <updateLEDMatrix5+0x3a8>)
 8001748:	f001 f954 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <updateLEDMatrix5+0x3ac>)
 8001754:	f001 f94e 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8001758:	e000      	b.n	800175c <updateLEDMatrix5+0x3a0>
	default:
		break;
 800175a:	bf00      	nop
	}
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00

0800176c <updateLEDMatrix6>:
void updateLEDMatrix6(int index){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800177a:	48c7      	ldr	r0, [pc, #796]	; (8001a98 <updateLEDMatrix6+0x32c>)
 800177c:	f001 f93a 	bl	80029f4 <HAL_GPIO_WritePin>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b07      	cmp	r3, #7
 8001784:	f200 81c1 	bhi.w	8001b0a <updateLEDMatrix6+0x39e>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <updateLEDMatrix6+0x24>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017b1 	.word	0x080017b1
 8001794:	0800181b 	.word	0x0800181b
 8001798:	08001885 	.word	0x08001885
 800179c:	080018ef 	.word	0x080018ef
 80017a0:	08001959 	.word	0x08001959
 80017a4:	080019c3 	.word	0x080019c3
 80017a8:	08001a2d 	.word	0x08001a2d
 80017ac:	08001aa1 	.word	0x08001aa1
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2104      	movs	r1, #4
 80017b4:	48b9      	ldr	r0, [pc, #740]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017b6:	f001 f91d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2108      	movs	r1, #8
 80017be:	48b7      	ldr	r0, [pc, #732]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017c0:	f001 f918 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	48b4      	ldr	r0, [pc, #720]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017cc:	f001 f912 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d6:	48b1      	ldr	r0, [pc, #708]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017d8:	f001 f90c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	48ae      	ldr	r0, [pc, #696]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017e4:	f001 f906 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	48ab      	ldr	r0, [pc, #684]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017f0:	f001 f900 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	48a8      	ldr	r0, [pc, #672]	; (8001a9c <updateLEDMatrix6+0x330>)
 80017fc:	f001 f8fa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	48a5      	ldr	r0, [pc, #660]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001808:	f001 f8f4 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001812:	48a1      	ldr	r0, [pc, #644]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001814:	f001 f8ee 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001818:	e178      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2104      	movs	r1, #4
 800181e:	489f      	ldr	r0, [pc, #636]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001820:	f001 f8e8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2108      	movs	r1, #8
 8001828:	489c      	ldr	r0, [pc, #624]	; (8001a9c <updateLEDMatrix6+0x330>)
 800182a:	f001 f8e3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001834:	4899      	ldr	r0, [pc, #612]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001836:	f001 f8dd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001840:	4896      	ldr	r0, [pc, #600]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001842:	f001 f8d7 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184c:	4893      	ldr	r0, [pc, #588]	; (8001a9c <updateLEDMatrix6+0x330>)
 800184e:	f001 f8d1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001858:	4890      	ldr	r0, [pc, #576]	; (8001a9c <updateLEDMatrix6+0x330>)
 800185a:	f001 f8cb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001864:	488d      	ldr	r0, [pc, #564]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001866:	f001 f8c5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001870:	488a      	ldr	r0, [pc, #552]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001872:	f001 f8bf 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187c:	4886      	ldr	r0, [pc, #536]	; (8001a98 <updateLEDMatrix6+0x32c>)
 800187e:	f001 f8b9 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001882:	e143      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2104      	movs	r1, #4
 8001888:	4884      	ldr	r0, [pc, #528]	; (8001a9c <updateLEDMatrix6+0x330>)
 800188a:	f001 f8b3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2108      	movs	r1, #8
 8001892:	4882      	ldr	r0, [pc, #520]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001894:	f001 f8ae 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189e:	487f      	ldr	r0, [pc, #508]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018a0:	f001 f8a8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	487c      	ldr	r0, [pc, #496]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018ac:	f001 f8a2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	4879      	ldr	r0, [pc, #484]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018b8:	f001 f89c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4876      	ldr	r0, [pc, #472]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018c4:	f001 f896 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ce:	4873      	ldr	r0, [pc, #460]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018d0:	f001 f890 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018da:	4870      	ldr	r0, [pc, #448]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018dc:	f001 f88a 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e6:	486c      	ldr	r0, [pc, #432]	; (8001a98 <updateLEDMatrix6+0x32c>)
 80018e8:	f001 f884 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80018ec:	e10e      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2104      	movs	r1, #4
 80018f2:	486a      	ldr	r0, [pc, #424]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018f4:	f001 f87e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2108      	movs	r1, #8
 80018fc:	4867      	ldr	r0, [pc, #412]	; (8001a9c <updateLEDMatrix6+0x330>)
 80018fe:	f001 f879 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <updateLEDMatrix6+0x330>)
 800190a:	f001 f873 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001914:	4861      	ldr	r0, [pc, #388]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001916:	f001 f86d 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001920:	485e      	ldr	r0, [pc, #376]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001922:	f001 f867 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192c:	485b      	ldr	r0, [pc, #364]	; (8001a9c <updateLEDMatrix6+0x330>)
 800192e:	f001 f861 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001938:	4858      	ldr	r0, [pc, #352]	; (8001a9c <updateLEDMatrix6+0x330>)
 800193a:	f001 f85b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001944:	4855      	ldr	r0, [pc, #340]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001946:	f001 f855 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001950:	4851      	ldr	r0, [pc, #324]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001952:	f001 f84f 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001956:	e0d9      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2104      	movs	r1, #4
 800195c:	484f      	ldr	r0, [pc, #316]	; (8001a9c <updateLEDMatrix6+0x330>)
 800195e:	f001 f849 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2108      	movs	r1, #8
 8001966:	484d      	ldr	r0, [pc, #308]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001968:	f001 f844 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001972:	484a      	ldr	r0, [pc, #296]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001974:	f001 f83e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197e:	4847      	ldr	r0, [pc, #284]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001980:	f001 f838 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198a:	4844      	ldr	r0, [pc, #272]	; (8001a9c <updateLEDMatrix6+0x330>)
 800198c:	f001 f832 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	4841      	ldr	r0, [pc, #260]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001998:	f001 f82c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	483e      	ldr	r0, [pc, #248]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019a4:	f001 f826 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ae:	483b      	ldr	r0, [pc, #236]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019b0:	f001 f820 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4837      	ldr	r0, [pc, #220]	; (8001a98 <updateLEDMatrix6+0x32c>)
 80019bc:	f001 f81a 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 80019c0:	e0a4      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2104      	movs	r1, #4
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019c8:	f001 f814 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2108      	movs	r1, #8
 80019d0:	4832      	ldr	r0, [pc, #200]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019d2:	f001 f80f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	482f      	ldr	r0, [pc, #188]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019de:	f001 f809 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e8:	482c      	ldr	r0, [pc, #176]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019ea:	f001 f803 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f4:	4829      	ldr	r0, [pc, #164]	; (8001a9c <updateLEDMatrix6+0x330>)
 80019f6:	f000 fffd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	4826      	ldr	r0, [pc, #152]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a02:	f000 fff7 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0c:	4823      	ldr	r0, [pc, #140]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a0e:	f000 fff1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a18:	4820      	ldr	r0, [pc, #128]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a1a:	f000 ffeb 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001a26:	f000 ffe5 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001a2a:	e06f      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a32:	f000 ffdf 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a3c:	f000 ffda 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a48:	f000 ffd4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a54:	f000 ffce 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a60:	f000 ffc8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a6c:	f000 ffc2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a78:	f000 ffbc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <updateLEDMatrix6+0x330>)
 8001a84:	f000 ffb6 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8e:	4802      	ldr	r0, [pc, #8]	; (8001a98 <updateLEDMatrix6+0x32c>)
 8001a90:	f000 ffb0 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001a94:	e03a      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
 8001a96:	bf00      	nop
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001aa6:	f000 ffa5 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2108      	movs	r1, #8
 8001aae:	4819      	ldr	r0, [pc, #100]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ab0:	f000 ffa0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aba:	4816      	ldr	r0, [pc, #88]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001abc:	f000 ff9a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	4813      	ldr	r0, [pc, #76]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ac8:	f000 ff94 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ad4:	f000 ff8e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001ae0:	f000 ff88 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001aec:	f000 ff82 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <updateLEDMatrix6+0x3a8>)
 8001af8:	f000 ff7c 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <updateLEDMatrix6+0x3ac>)
 8001b04:	f000 ff76 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8001b08:	e000      	b.n	8001b0c <updateLEDMatrix6+0x3a0>
	default:
		break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00

08001b1c <updateLEDMatrix7>:
void updateLEDMatrix7(int index){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b2a:	48c7      	ldr	r0, [pc, #796]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001b2c:	f000 ff62 	bl	80029f4 <HAL_GPIO_WritePin>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	f200 81c1 	bhi.w	8001eba <updateLEDMatrix7+0x39e>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <updateLEDMatrix7+0x24>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b61 	.word	0x08001b61
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001c35 	.word	0x08001c35
 8001b4c:	08001c9f 	.word	0x08001c9f
 8001b50:	08001d09 	.word	0x08001d09
 8001b54:	08001d73 	.word	0x08001d73
 8001b58:	08001ddd 	.word	0x08001ddd
 8001b5c:	08001e51 	.word	0x08001e51
	switch (index){
	case 0:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2104      	movs	r1, #4
 8001b64:	48b9      	ldr	r0, [pc, #740]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b66:	f000 ff45 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	48b7      	ldr	r0, [pc, #732]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b70:	f000 ff40 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	48b4      	ldr	r0, [pc, #720]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b7c:	f000 ff3a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b86:	48b1      	ldr	r0, [pc, #708]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b88:	f000 ff34 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	48ae      	ldr	r0, [pc, #696]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001b94:	f000 ff2e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	48ab      	ldr	r0, [pc, #684]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001ba0:	f000 ff28 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	48a8      	ldr	r0, [pc, #672]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bac:	f000 ff22 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb6:	48a5      	ldr	r0, [pc, #660]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bb8:	f000 ff1c 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	48a1      	ldr	r0, [pc, #644]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001bc4:	f000 ff16 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001bc8:	e178      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 1:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2104      	movs	r1, #4
 8001bce:	489f      	ldr	r0, [pc, #636]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bd0:	f000 ff10 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	489c      	ldr	r0, [pc, #624]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bda:	f000 ff0b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be4:	4899      	ldr	r0, [pc, #612]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001be6:	f000 ff05 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf0:	4896      	ldr	r0, [pc, #600]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bf2:	f000 feff 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfc:	4893      	ldr	r0, [pc, #588]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001bfe:	f000 fef9 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c08:	4890      	ldr	r0, [pc, #576]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c0a:	f000 fef3 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c14:	488d      	ldr	r0, [pc, #564]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c16:	f000 feed 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c20:	488a      	ldr	r0, [pc, #552]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c22:	f000 fee7 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2c:	4886      	ldr	r0, [pc, #536]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001c2e:	f000 fee1 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001c32:	e143      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 2:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2104      	movs	r1, #4
 8001c38:	4884      	ldr	r0, [pc, #528]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c3a:	f000 fedb 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2108      	movs	r1, #8
 8001c42:	4882      	ldr	r0, [pc, #520]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c44:	f000 fed6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	487f      	ldr	r0, [pc, #508]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c50:	f000 fed0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5a:	487c      	ldr	r0, [pc, #496]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c5c:	f000 feca 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4879      	ldr	r0, [pc, #484]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c68:	f000 fec4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	4876      	ldr	r0, [pc, #472]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c74:	f000 febe 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c80:	f000 feb8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8a:	4870      	ldr	r0, [pc, #448]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001c8c:	f000 feb2 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c96:	486c      	ldr	r0, [pc, #432]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001c98:	f000 feac 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001c9c:	e10e      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 3:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	486a      	ldr	r0, [pc, #424]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001ca4:	f000 fea6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2108      	movs	r1, #8
 8001cac:	4867      	ldr	r0, [pc, #412]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cae:	f000 fea1 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cba:	f000 fe9b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc4:	4861      	ldr	r0, [pc, #388]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cc6:	f000 fe95 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd0:	485e      	ldr	r0, [pc, #376]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cd2:	f000 fe8f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cdc:	485b      	ldr	r0, [pc, #364]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cde:	f000 fe89 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce8:	4858      	ldr	r0, [pc, #352]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cea:	f000 fe83 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf4:	4855      	ldr	r0, [pc, #340]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001cf6:	f000 fe7d 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d00:	4851      	ldr	r0, [pc, #324]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001d02:	f000 fe77 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001d06:	e0d9      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 4:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	484f      	ldr	r0, [pc, #316]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d0e:	f000 fe71 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2108      	movs	r1, #8
 8001d16:	484d      	ldr	r0, [pc, #308]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d18:	f000 fe6c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d22:	484a      	ldr	r0, [pc, #296]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d24:	f000 fe66 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2e:	4847      	ldr	r0, [pc, #284]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d30:	f000 fe60 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4844      	ldr	r0, [pc, #272]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d3c:	f000 fe5a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d46:	4841      	ldr	r0, [pc, #260]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d48:	f000 fe54 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d52:	483e      	ldr	r0, [pc, #248]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d54:	f000 fe4e 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d60:	f000 fe48 	bl	80029f4 <HAL_GPIO_WritePin>
		//ROW
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4837      	ldr	r0, [pc, #220]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001d6c:	f000 fe42 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001d70:	e0a4      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 5:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2104      	movs	r1, #4
 8001d76:	4835      	ldr	r0, [pc, #212]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d78:	f000 fe3c 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4832      	ldr	r0, [pc, #200]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d82:	f000 fe37 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8c:	482f      	ldr	r0, [pc, #188]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d8e:	f000 fe31 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d98:	482c      	ldr	r0, [pc, #176]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001d9a:	f000 fe2b 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	4829      	ldr	r0, [pc, #164]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001da6:	f000 fe25 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db0:	4826      	ldr	r0, [pc, #152]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001db2:	f000 fe1f 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbc:	4823      	ldr	r0, [pc, #140]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dbe:	f000 fe19 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	4820      	ldr	r0, [pc, #128]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dca:	f000 fe13 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb8_GPIO_Port, pb8_Pin, SET);
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001dd6:	f000 fe0d 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001dda:	e06f      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	case 6:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2104      	movs	r1, #4
 8001de0:	481a      	ldr	r0, [pc, #104]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001de2:	f000 fe07 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2108      	movs	r1, #8
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001dec:	f000 fe02 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	4815      	ldr	r0, [pc, #84]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001df8:	f000 fdfc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e04:	f000 fdf6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	480f      	ldr	r0, [pc, #60]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e10:	f000 fdf0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e1c:	f000 fdea 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e28:	f000 fde4 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <updateLEDMatrix7+0x330>)
 8001e34:	f000 fdde 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb9_GPIO_Port, pb9_Pin, SET);
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <updateLEDMatrix7+0x32c>)
 8001e40:	f000 fdd8 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, SET);
		break;
 8001e44:	e03a      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
 8001e46:	bf00      	nop
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40010800 	.word	0x40010800
	case 7:
		//COL
		HAL_GPIO_WritePin(pa2_GPIO_Port, pa2_Pin, SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	2104      	movs	r1, #4
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e56:	f000 fdcd 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa3_GPIO_Port, pa3_Pin, SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	4819      	ldr	r0, [pc, #100]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e60:	f000 fdc8 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa10_GPIO_Port, pa10_Pin, RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e6c:	f000 fdc2 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa11_GPIO_Port, pa11_Pin, RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e78:	f000 fdbc 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa12_GPIO_Port, pa12_Pin, SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e84:	f000 fdb6 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa13_GPIO_Port, pa13_Pin, SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e90:	f000 fdb0 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa14_GPIO_Port, pa14_Pin, RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9a:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001e9c:	f000 fdaa 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pa15_GPIO_Port, pa15_Pin, RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <updateLEDMatrix7+0x3a8>)
 8001ea8:	f000 fda4 	bl	80029f4 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(pb10_GPIO_Port, pb10_Pin, SET);
//		HAL_GPIO_WritePin(pb11_GPIO_Port, pb11_Pin, SET);
//		HAL_GPIO_WritePin(pb12_GPIO_Port, pb12_Pin, SET);
//		HAL_GPIO_WritePin(pb13_GPIO_Port, pb13_Pin, SET);
//		HAL_GPIO_WritePin(pb14_GPIO_Port, pb14_Pin, SET);
		HAL_GPIO_WritePin(pb15_GPIO_Port, pb15_Pin, RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <updateLEDMatrix7+0x3ac>)
 8001eb4:	f000 fd9e 	bl	80029f4 <HAL_GPIO_WritePin>
		break;
 8001eb8:	e000      	b.n	8001ebc <updateLEDMatrix7+0x3a0>
	default:
		break;
 8001eba:	bf00      	nop
	}
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <init_exercise1>:
	led_buffer[0]=hour/10;
	led_buffer[1]=hour%10;
	led_buffer[2]=minute/10;
	led_buffer[3]=minute%10;
}
void init_exercise1(){}
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setTimer(0,0);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 f9a1 	bl	8002228 <setTimer>
  setTimer(1,0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f000 f99d 	bl	8002228 <setTimer>
  setTimer(2,25);
 8001eee:	2119      	movs	r1, #25
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f000 f999 	bl	8002228 <setTimer>
  setTimer(3,50);
 8001ef6:	2132      	movs	r1, #50	; 0x32
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f995 	bl	8002228 <setTimer>
  setTimer(4,75);
 8001efe:	214b      	movs	r1, #75	; 0x4b
 8001f00:	2004      	movs	r0, #4
 8001f02:	f000 f991 	bl	8002228 <setTimer>
  setTimer(5,0);
 8001f06:	2100      	movs	r1, #0
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f000 f98d 	bl	8002228 <setTimer>
  setTimer(6,0);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2006      	movs	r0, #6
 8001f12:	f000 f989 	bl	8002228 <setTimer>
//  int hour=15, minute=8,second=50;
  int haha=0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  int status=0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1e:	f000 fa7f 	bl	8002420 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_exercise1();
 8001f22:	f7ff ffd3 	bl	8001ecc <init_exercise1>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f26:	f000 f891 	bl	800204c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001f2a:	f000 f8cb 	bl	80020c4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001f2e:	f000 f915 	bl	800215c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001f32:	4842      	ldr	r0, [pc, #264]	; (800203c <main+0x164>)
 8001f34:	f001 f9bc 	bl	80032b0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (timer_flag[0]==1){
 8001f38:	4b41      	ldr	r3, [pc, #260]	; (8002040 <main+0x168>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <main+0x78>
		  setTimer(0,100);
 8001f40:	2164      	movs	r1, #100	; 0x64
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f970 	bl	8002228 <setTimer>
		  HAL_GPIO_TogglePin(pa5_GPIO_Port, pa5_Pin);
 8001f48:	2120      	movs	r1, #32
 8001f4a:	483e      	ldr	r0, [pc, #248]	; (8002044 <main+0x16c>)
 8001f4c:	f000 fd6a 	bl	8002a24 <HAL_GPIO_TogglePin>
//		  if (hour>=24){
//			  hour=0;
//		  }
//		  updateClockBuffer(hour,minute);
//	  }
	  if (timer_flag[6]==1){
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <main+0x168>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d1ef      	bne.n	8001f38 <main+0x60>
		  setTimer(6,50);
 8001f58:	2132      	movs	r1, #50	; 0x32
 8001f5a:	2006      	movs	r0, #6
 8001f5c:	f000 f964 	bl	8002228 <setTimer>
		  if (status>=0&&status<100){updateLEDMatrix0(haha);}
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db05      	blt.n	8001f72 <main+0x9a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b63      	cmp	r3, #99	; 0x63
 8001f6a:	dc02      	bgt.n	8001f72 <main+0x9a>
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe f8ed 	bl	800014c <updateLEDMatrix0>
		  if (status>=100&&status<200){updateLEDMatrix1(haha);}
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b63      	cmp	r3, #99	; 0x63
 8001f76:	dd05      	ble.n	8001f84 <main+0xac>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2bc7      	cmp	r3, #199	; 0xc7
 8001f7c:	dc02      	bgt.n	8001f84 <main+0xac>
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fabc 	bl	80004fc <updateLEDMatrix1>
		  if (status>=200&&status<300){updateLEDMatrix2(haha);}
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2bc7      	cmp	r3, #199	; 0xc7
 8001f88:	dd06      	ble.n	8001f98 <main+0xc0>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f90:	da02      	bge.n	8001f98 <main+0xc0>
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fc8a 	bl	80008ac <updateLEDMatrix2>
		  if (status>=300&&status<400){updateLEDMatrix3(haha);}
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f9e:	db06      	blt.n	8001fae <main+0xd6>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fa6:	da02      	bge.n	8001fae <main+0xd6>
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe fe57 	bl	8000c5c <updateLEDMatrix3>
		  if (status>=400&&status<500){updateLEDMatrix4(haha);}
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fb4:	db06      	blt.n	8001fc4 <main+0xec>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fbc:	da02      	bge.n	8001fc4 <main+0xec>
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff f824 	bl	800100c <updateLEDMatrix4>
		  if (status>=500&&status<600){updateLEDMatrix5(haha);}
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fca:	db06      	blt.n	8001fda <main+0x102>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fd2:	da02      	bge.n	8001fda <main+0x102>
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff f9f1 	bl	80013bc <updateLEDMatrix5>
		  if (status>=600&&status<700){updateLEDMatrix6(haha);}
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fe0:	db06      	blt.n	8001ff0 <main+0x118>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001fe8:	da02      	bge.n	8001ff0 <main+0x118>
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fbbe 	bl	800176c <updateLEDMatrix6>
		  if (status>=700&&status<800){updateLEDMatrix7(haha);}
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001ff6:	db06      	blt.n	8002006 <main+0x12e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ffe:	da02      	bge.n	8002006 <main+0x12e>
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fd8b 	bl	8001b1c <updateLEDMatrix7>
		  updateLEDMatrix2(haha);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fc50 	bl	80008ac <updateLEDMatrix2>
		  haha=(haha+1)%8;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3301      	adds	r3, #1
 8002010:	425a      	negs	r2, r3
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	f002 0207 	and.w	r2, r2, #7
 800201a:	bf58      	it	pl
 800201c:	4253      	negpl	r3, r2
 800201e:	607b      	str	r3, [r7, #4]
		  status=(status+1)%200;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <main+0x170>)
 8002026:	fb82 1203 	smull	r1, r2, r2, r3
 800202a:	1191      	asrs	r1, r2, #6
 800202c:	17da      	asrs	r2, r3, #31
 800202e:	1a8a      	subs	r2, r1, r2
 8002030:	21c8      	movs	r1, #200	; 0xc8
 8002032:	fb01 f202 	mul.w	r2, r1, r2
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	603b      	str	r3, [r7, #0]
	  if (timer_flag[0]==1){
 800203a:	e77d      	b.n	8001f38 <main+0x60>
 800203c:	20000028 	.word	0x20000028
 8002040:	20000098 	.word	0x20000098
 8002044:	40010800 	.word	0x40010800
 8002048:	51eb851f 	.word	0x51eb851f

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b090      	sub	sp, #64	; 0x40
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	2228      	movs	r2, #40	; 0x28
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fcd8 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002072:	2301      	movs	r3, #1
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002076:	2310      	movs	r3, #16
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fce8 	bl	8002a58 <HAL_RCC_OscConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800208e:	f000 f8c5 	bl	800221c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002092:	230f      	movs	r3, #15
 8002094:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 ff54 	bl	8002f58 <HAL_RCC_ClockConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020b6:	f000 f8b1 	bl	800221c <Error_Handler>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3740      	adds	r7, #64	; 0x40
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_TIM2_Init+0x94>)
 80020e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_TIM2_Init+0x94>)
 80020ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80020ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_TIM2_Init+0x94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_TIM2_Init+0x94>)
 80020f8:	220a      	movs	r2, #10
 80020fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_TIM2_Init+0x94>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <MX_TIM2_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <MX_TIM2_Init+0x94>)
 800210a:	f001 f881 	bl	8003210 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002114:	f000 f882 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_TIM2_Init+0x94>)
 8002126:	f001 f9ff 	bl	8003528 <HAL_TIM_ConfigClockSource>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002130:	f000 f874 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_TIM2_Init+0x94>)
 8002142:	f001 fbd7 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800214c:	f000 f866 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000028 	.word	0x20000028

0800215c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <MX_GPIO_Init+0xa0>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <MX_GPIO_Init+0xa0>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_GPIO_Init+0xa0>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_GPIO_Init+0xa0>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <MX_GPIO_Init+0xa0>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_GPIO_Init+0xa0>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pa2_Pin|pa3_Pin|pa4_Pin|pa5_Pin
 80021a0:	2200      	movs	r2, #0
 80021a2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80021a6:	4816      	ldr	r0, [pc, #88]	; (8002200 <MX_GPIO_Init+0xa4>)
 80021a8:	f000 fc24 	bl	80029f4 <HAL_GPIO_WritePin>
                          |pa6_Pin|pa7_Pin|pa8_Pin|pa9_Pin
                          |pa10_Pin|pa11_Pin|pa12_Pin|pa13_Pin
                          |pa14_Pin|pa15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pb0_Pin|pb1_Pin|pb2_Pin|pb10_Pin
 80021ac:	2200      	movs	r2, #0
 80021ae:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <MX_GPIO_Init+0xa8>)
 80021b4:	f000 fc1e 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pa2_Pin pa3_Pin pa4_Pin pa5_Pin
                           pa6_Pin pa7_Pin pa8_Pin pa9_Pin
                           pa10_Pin pa11_Pin pa12_Pin pa13_Pin
                           pa14_Pin pa15_Pin */
  GPIO_InitStruct.Pin = pa2_Pin|pa3_Pin|pa4_Pin|pa5_Pin
 80021b8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80021bc:	60bb      	str	r3, [r7, #8]
                          |pa6_Pin|pa7_Pin|pa8_Pin|pa9_Pin
                          |pa10_Pin|pa11_Pin|pa12_Pin|pa13_Pin
                          |pa14_Pin|pa15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2302      	movs	r3, #2
 80021c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	480b      	ldr	r0, [pc, #44]	; (8002200 <MX_GPIO_Init+0xa4>)
 80021d2:	f000 fa95 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : pb0_Pin pb1_Pin pb2_Pin pb10_Pin
                           pb11_Pin pb12_Pin pb13_Pin pb14_Pin
                           pb15_Pin pb3_Pin pb4_Pin pb5_Pin
                           pb6_Pin pb8_Pin pb9_Pin */
  GPIO_InitStruct.Pin = pb0_Pin|pb1_Pin|pb2_Pin|pb10_Pin
 80021d6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80021da:	60bb      	str	r3, [r7, #8]
                          |pb11_Pin|pb12_Pin|pb13_Pin|pb14_Pin
                          |pb15_Pin|pb3_Pin|pb4_Pin|pb5_Pin
                          |pb6_Pin|pb8_Pin|pb9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_GPIO_Init+0xa8>)
 80021f0:	f000 fa86 	bl	8002700 <HAL_GPIO_Init>

}
 80021f4:	bf00      	nop
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00

08002208 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	timerRun();
 8002210:	f000 f822 	bl	8002258 <timerRun>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002224:	e7fe      	b.n	8002224 <Error_Handler+0x8>
	...

08002228 <setTimer>:
 *      Author: Phan Duc Loi
 */
#include "software_timer.h"
int timer_counter[10];
int timer_flag[10];
void setTimer(int index, int duration){
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	timer_counter[index]=duration;
 8002232:	4907      	ldr	r1, [pc, #28]	; (8002250 <setTimer+0x28>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <setTimer+0x2c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2100      	movs	r1, #0
 8002242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000070 	.word	0x20000070
 8002254:	20000098 	.word	0x20000098

08002258 <timerRun>:
void timerRun(){
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
	for (int i=0;i<10;i++){
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	e01c      	b.n	800229e <timerRun+0x46>
		if (timer_counter[i]>=0){
 8002264:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <timerRun+0x58>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db13      	blt.n	8002298 <timerRun+0x40>
			timer_counter[i]--;
 8002270:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <timerRun+0x58>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <timerRun+0x58>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0){
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <timerRun+0x58>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	2b00      	cmp	r3, #0
 800228c:	dc04      	bgt.n	8002298 <timerRun+0x40>
				timer_flag[i]=1;
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <timerRun+0x5c>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2101      	movs	r1, #1
 8002294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<10;i++){
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	dddf      	ble.n	8002264 <timerRun+0xc>
			}
		}
	}
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000070 	.word	0x20000070
 80022b4:	20000098 	.word	0x20000098

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_MspInit+0x5c>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_MspInit+0x5c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6193      	str	r3, [r2, #24]
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_MspInit+0x5c>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_MspInit+0x5c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_MspInit+0x5c>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	61d3      	str	r3, [r2, #28]
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_MspInit+0x5c>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_MspInit+0x60>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_MspInit+0x60>)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000

0800231c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d113      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_TIM_Base_MspInit+0x44>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_TIM_Base_MspInit+0x44>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_TIM_Base_MspInit+0x44>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201c      	movs	r0, #28
 800234c:	f000 f9a1 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002350:	201c      	movs	r0, #28
 8002352:	f000 f9ba 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler+0x4>

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <MemManage_Handler+0x4>

08002376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler+0x4>

08002382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023aa:	f000 f87f 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM2_IRQHandler+0x10>)
 80023ba:	f000 ffc5 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000028 	.word	0x20000028

080023c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d4:	f7ff fff8 	bl	80023c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023da:	490c      	ldr	r1, [pc, #48]	; (800240c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023f0:	4c09      	ldr	r4, [pc, #36]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fe:	f001 fae3 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002402:	f7ff fd69 	bl	8001ed8 <main>
  bx lr
 8002406:	4770      	bx	lr
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002410:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 8002414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002418:	200000c4 	.word	0x200000c4

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_Init+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_Init+0x28>)
 800242a:	f043 0310 	orr.w	r3, r3, #16
 800242e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f923 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	200f      	movs	r0, #15
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff ff3c 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f93b 	bl	80026e6 <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f903 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_IncTick+0x20>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000008 	.word	0x20000008
 80024cc:	200000c0 	.word	0x200000c0

080024d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	200000c0 	.word	0x200000c0

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4906      	ldr	r1, [pc, #24]	; (800257c <__NVIC_EnableIRQ+0x34>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff90 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff2d 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff42 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff90 	bl	80025d4 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5f 	bl	8002580 <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff35 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b08b      	sub	sp, #44	; 0x2c
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002712:	e148      	b.n	80029a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002714:	2201      	movs	r2, #1
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8137 	bne.w	80029a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4aa3      	ldr	r2, [pc, #652]	; (80029c4 <HAL_GPIO_Init+0x2c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d05e      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
 800273c:	4aa1      	ldr	r2, [pc, #644]	; (80029c4 <HAL_GPIO_Init+0x2c4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d875      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 8002742:	4aa1      	ldr	r2, [pc, #644]	; (80029c8 <HAL_GPIO_Init+0x2c8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d058      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
 8002748:	4a9f      	ldr	r2, [pc, #636]	; (80029c8 <HAL_GPIO_Init+0x2c8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d86f      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 800274e:	4a9f      	ldr	r2, [pc, #636]	; (80029cc <HAL_GPIO_Init+0x2cc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d052      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
 8002754:	4a9d      	ldr	r2, [pc, #628]	; (80029cc <HAL_GPIO_Init+0x2cc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d869      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 800275a:	4a9d      	ldr	r2, [pc, #628]	; (80029d0 <HAL_GPIO_Init+0x2d0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d04c      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
 8002760:	4a9b      	ldr	r2, [pc, #620]	; (80029d0 <HAL_GPIO_Init+0x2d0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d863      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 8002766:	4a9b      	ldr	r2, [pc, #620]	; (80029d4 <HAL_GPIO_Init+0x2d4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d046      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
 800276c:	4a99      	ldr	r2, [pc, #612]	; (80029d4 <HAL_GPIO_Init+0x2d4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d85d      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 8002772:	2b12      	cmp	r3, #18
 8002774:	d82a      	bhi.n	80027cc <HAL_GPIO_Init+0xcc>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d859      	bhi.n	800282e <HAL_GPIO_Init+0x12e>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_GPIO_Init+0x80>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027fb 	.word	0x080027fb
 8002784:	080027d5 	.word	0x080027d5
 8002788:	080027e7 	.word	0x080027e7
 800278c:	08002829 	.word	0x08002829
 8002790:	0800282f 	.word	0x0800282f
 8002794:	0800282f 	.word	0x0800282f
 8002798:	0800282f 	.word	0x0800282f
 800279c:	0800282f 	.word	0x0800282f
 80027a0:	0800282f 	.word	0x0800282f
 80027a4:	0800282f 	.word	0x0800282f
 80027a8:	0800282f 	.word	0x0800282f
 80027ac:	0800282f 	.word	0x0800282f
 80027b0:	0800282f 	.word	0x0800282f
 80027b4:	0800282f 	.word	0x0800282f
 80027b8:	0800282f 	.word	0x0800282f
 80027bc:	0800282f 	.word	0x0800282f
 80027c0:	0800282f 	.word	0x0800282f
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027f1 	.word	0x080027f1
 80027cc:	4a82      	ldr	r2, [pc, #520]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d2:	e02c      	b.n	800282e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	623b      	str	r3, [r7, #32]
          break;
 80027da:	e029      	b.n	8002830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e024      	b.n	8002830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	3308      	adds	r3, #8
 80027ec:	623b      	str	r3, [r7, #32]
          break;
 80027ee:	e01f      	b.n	8002830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	330c      	adds	r3, #12
 80027f6:	623b      	str	r3, [r7, #32]
          break;
 80027f8:	e01a      	b.n	8002830 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002802:	2304      	movs	r3, #4
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e013      	b.n	8002830 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002810:	2308      	movs	r3, #8
 8002812:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	611a      	str	r2, [r3, #16]
          break;
 800281a:	e009      	b.n	8002830 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800281c:	2308      	movs	r3, #8
 800281e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	615a      	str	r2, [r3, #20]
          break;
 8002826:	e003      	b.n	8002830 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
          break;
 800282c:	e000      	b.n	8002830 <HAL_GPIO_Init+0x130>
          break;
 800282e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2bff      	cmp	r3, #255	; 0xff
 8002834:	d801      	bhi.n	800283a <HAL_GPIO_Init+0x13a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	e001      	b.n	800283e <HAL_GPIO_Init+0x13e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2bff      	cmp	r3, #255	; 0xff
 8002844:	d802      	bhi.n	800284c <HAL_GPIO_Init+0x14c>
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	e002      	b.n	8002852 <HAL_GPIO_Init+0x152>
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3b08      	subs	r3, #8
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	210f      	movs	r1, #15
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	6a39      	ldr	r1, [r7, #32]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	431a      	orrs	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8090 	beq.w	80029a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002880:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a55      	ldr	r2, [pc, #340]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002898:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_GPIO_Init+0x2e0>)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a49      	ldr	r2, [pc, #292]	; (80029e4 <HAL_GPIO_Init+0x2e4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00d      	beq.n	80028e0 <HAL_GPIO_Init+0x1e0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a48      	ldr	r2, [pc, #288]	; (80029e8 <HAL_GPIO_Init+0x2e8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <HAL_GPIO_Init+0x1dc>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a47      	ldr	r2, [pc, #284]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d101      	bne.n	80028d8 <HAL_GPIO_Init+0x1d8>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e004      	b.n	80028e2 <HAL_GPIO_Init+0x1e2>
 80028d8:	2303      	movs	r3, #3
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x1e2>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_GPIO_Init+0x1e2>
 80028e0:	2300      	movs	r3, #0
 80028e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	4093      	lsls	r3, r2
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028f2:	493b      	ldr	r1, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x2e0>)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4937      	ldr	r1, [pc, #220]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	43db      	mvns	r3, r3
 8002922:	4933      	ldr	r1, [pc, #204]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002924:	4013      	ands	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	492d      	ldr	r1, [pc, #180]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	4929      	ldr	r1, [pc, #164]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800294c:	4013      	ands	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4923      	ldr	r1, [pc, #140]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	491f      	ldr	r1, [pc, #124]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002974:	4013      	ands	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4919      	ldr	r1, [pc, #100]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4915      	ldr	r1, [pc, #84]	; (80029f0 <HAL_GPIO_Init+0x2f0>)
 800299c:	4013      	ands	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	3301      	adds	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f aeaf 	bne.w	8002714 <HAL_GPIO_Init+0x14>
  }
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	372c      	adds	r7, #44	; 0x2c
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	10320000 	.word	0x10320000
 80029c8:	10310000 	.word	0x10310000
 80029cc:	10220000 	.word	0x10220000
 80029d0:	10210000 	.word	0x10210000
 80029d4:	10120000 	.word	0x10120000
 80029d8:	10110000 	.word	0x10110000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40010800 	.word	0x40010800
 80029e8:	40010c00 	.word	0x40010c00
 80029ec:	40011000 	.word	0x40011000
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43d9      	mvns	r1, r3
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	400b      	ands	r3, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e26c      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8087 	beq.w	8002b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a78:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a84:	4b8f      	ldr	r3, [pc, #572]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d112      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
 8002a90:	4b8c      	ldr	r3, [pc, #560]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d06c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x12c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d168      	bne.n	8002b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e246      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x76>
 8002ac0:	4b80      	ldr	r3, [pc, #512]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7f      	ldr	r2, [pc, #508]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x98>
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xbc>
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a71      	ldr	r2, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002b14:	4b6b      	ldr	r3, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a67      	ldr	r2, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fccc 	bl	80024d0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fcc8 	bl	80024d0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1fa      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe4>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fcb8 	bl	80024d0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7ff fcb4 	bl	80024d0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1e6      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x10c>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1ba      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4939      	ldr	r1, [pc, #228]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff fc6d 	bl	80024d0 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7ff fc69 	bl	80024d0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e19b      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4927      	ldr	r1, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff fc4c 	bl	80024d0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7ff fc48 	bl	80024d0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e17a      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03a      	beq.n	8002cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7ff fc2c 	bl	80024d0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7ff fc28 	bl	80024d0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e15a      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f000 fa9a 	bl	80031d4 <RCC_Delay>
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7ff fc12 	bl	80024d0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7ff fc0e 	bl	80024d0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e140      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	42420000 	.word	0x42420000
 8002ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e9      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a6 	beq.w	8002e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b97      	ldr	r3, [pc, #604]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b94      	ldr	r3, [pc, #592]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a93      	ldr	r2, [pc, #588]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]
 8002d06:	4b91      	ldr	r3, [pc, #580]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x4f8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a8a      	ldr	r2, [pc, #552]	; (8002f50 <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7ff fbcf 	bl	80024d0 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7ff fbcb 	bl	80024d0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0fd      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x312>
 8002d5c:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a7a      	ldr	r2, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e02d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x334>
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4b73      	ldr	r3, [pc, #460]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a72      	ldr	r2, [pc, #456]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	e01c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x356>
 8002d94:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4a6c      	ldr	r2, [pc, #432]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6213      	str	r3, [r2, #32]
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a66      	ldr	r2, [pc, #408]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7ff fb7f 	bl	80024d0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7ff fb7b 	bl	80024d0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0ab      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x37e>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fb69 	bl	80024d0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff fb65 	bl	80024d0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e095      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b48      	ldr	r3, [pc, #288]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a47      	ldr	r2, [pc, #284]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8081 	beq.w	8002f42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d061      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d146      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0x4fc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7ff fb39 	bl	80024d0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7ff fb35 	bl	80024d0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e067      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a19      	ldr	r1, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	430b      	orrs	r3, r1
 8002eae:	4927      	ldr	r1, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_OscConfig+0x4fc>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7ff fb09 	bl	80024d0 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7ff fb05 	bl	80024d0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e037      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46a>
 8002ee0:	e02f      	b.n	8002f42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_RCC_OscConfig+0x4fc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7ff faf2 	bl	80024d0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7ff faee 	bl	80024d0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e020      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x498>
 8002f0e:	e018      	b.n	8002f42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e013      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420060 	.word	0x42420060

08002f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0d0      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d910      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	4965      	ldr	r1, [pc, #404]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0b8      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb4:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	494d      	ldr	r1, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d040      	beq.n	8003078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d115      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e07f      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e073      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06b      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4936      	ldr	r1, [pc, #216]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003048:	f7ff fa42 	bl	80024d0 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7ff fa3e 	bl	80024d0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e053      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d210      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4922      	ldr	r1, [pc, #136]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e032      	b.n	800310e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4916      	ldr	r1, [pc, #88]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	490e      	ldr	r1, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e6:	f000 f821 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	490a      	ldr	r1, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	5ccb      	ldrb	r3, [r1, r3]
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_ClockConfig+0x1cc>)
 8003100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1d0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f9a0 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40022000 	.word	0x40022000
 800311c:	40021000 	.word	0x40021000
 8003120:	08003a38 	.word	0x08003a38
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x30>
 8003156:	2b08      	cmp	r3, #8
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x36>
 800315a:	e027      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	613b      	str	r3, [r7, #16]
      break;
 8003160:	e027      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	0c9b      	lsrs	r3, r3, #18
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0c5b      	lsrs	r3, r3, #17
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318e:	fb02 f203 	mul.w	r2, r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e004      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	613b      	str	r3, [r7, #16]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	613b      	str	r3, [r7, #16]
      break;
 80031b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b2:	693b      	ldr	r3, [r7, #16]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	08003a48 	.word	0x08003a48
 80031cc:	08003a58 	.word	0x08003a58
 80031d0:	003d0900 	.word	0x003d0900

080031d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RCC_Delay+0x34>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <RCC_Delay+0x38>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f0:	bf00      	nop
  }
  while (Delay --);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <RCC_Delay+0x1c>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	20000000 	.word	0x20000000
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e041      	b.n	80032a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff f870 	bl	800231c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f000 fa56 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e035      	b.n	8003334 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIM_Base_Start_IT+0x90>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x4e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d004      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x4e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a12      	ldr	r2, [pc, #72]	; (8003344 <HAL_TIM_Base_Start_IT+0x94>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d010      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	e007      	b.n	8003332 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f998 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f98b 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f99a 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f972 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f965 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f974 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0208 	mvn.w	r2, #8
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2204      	movs	r2, #4
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f94c 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f93f 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f94e 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d020      	beq.n	8003490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0210 	mvn.w	r2, #16
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2208      	movs	r2, #8
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f926 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f919 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f928 	bl	80036da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe feaa 	bl	8002208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa6f 	bl	80039b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8f8 	bl	80036ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0220 	mvn.w	r2, #32
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa42 	bl	80039a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIM_ConfigClockSource+0x1c>
 8003540:	2302      	movs	r3, #2
 8003542:	e0b4      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x186>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d03e      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0xd4>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	f200 8087 	bhi.w	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	f000 8086 	beq.w	800369a <HAL_TIM_ConfigClockSource+0x172>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	d87f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b70      	cmp	r3, #112	; 0x70
 8003596:	d01a      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xa6>
 8003598:	2b70      	cmp	r3, #112	; 0x70
 800359a:	d87b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b60      	cmp	r3, #96	; 0x60
 800359e:	d050      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x11a>
 80035a0:	2b60      	cmp	r3, #96	; 0x60
 80035a2:	d877      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b50      	cmp	r3, #80	; 0x50
 80035a6:	d03c      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xfa>
 80035a8:	2b50      	cmp	r3, #80	; 0x50
 80035aa:	d873      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d058      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x13a>
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d86f      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b30      	cmp	r3, #48	; 0x30
 80035b6:	d064      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b30      	cmp	r3, #48	; 0x30
 80035ba:	d86b      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d060      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d867      	bhi.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d05a      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	e062      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f000 f96a 	bl	80038b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e04f      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f000 f953 	bl	80038b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e03c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f8ca 	bl	80037c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2150      	movs	r1, #80	; 0x50
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f921 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003640:	e02c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f8e8 	bl	8003824 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2160      	movs	r1, #96	; 0x60
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f911 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003660:	e01c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f000 f8aa 	bl	80037c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f901 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003680:	e00c      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f000 f8f8 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003692:	e003      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e000      	b.n	800369c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800369a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
	...

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <TIM_Base_SetConfig+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0x28>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0x28>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <TIM_Base_SetConfig+0xc4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <TIM_Base_SetConfig+0xc0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0x52>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0x52>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_Base_SetConfig+0xc4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <TIM_Base_SetConfig+0xc0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d103      	bne.n	8003798 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]
  }
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400

080037c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 030a 	bic.w	r3, r3, #10
 8003804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0210 	bic.w	r2, r3, #16
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800384e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003860:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e041      	b.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d004      	beq.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400

080039a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	2600      	movs	r6, #0
 80039cc:	4d0c      	ldr	r5, [pc, #48]	; (8003a00 <__libc_init_array+0x38>)
 80039ce:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039d0:	1b64      	subs	r4, r4, r5
 80039d2:	10a4      	asrs	r4, r4, #2
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	f000 f822 	bl	8003a20 <_init>
 80039dc:	2600      	movs	r6, #0
 80039de:	4d0a      	ldr	r5, [pc, #40]	; (8003a08 <__libc_init_array+0x40>)
 80039e0:	4c0a      	ldr	r4, [pc, #40]	; (8003a0c <__libc_init_array+0x44>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08003a5c 	.word	0x08003a5c
 8003a04:	08003a5c 	.word	0x08003a5c
 8003a08:	08003a5c 	.word	0x08003a5c
 8003a0c:	08003a60 	.word	0x08003a60

08003a10 <memset>:
 8003a10:	4603      	mov	r3, r0
 8003a12:	4402      	add	r2, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <_init>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr

08003a2c <_fini>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr
